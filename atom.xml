<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Udooz!]]></title>
  <link href="http://udooz.github.io//blog/atom.xml" rel="self"/>
  <link href="http://udooz.github.io//blog/"/>
  <updated>2014-06-23T14:49:53+05:30</updated>
  <id>http://udooz.github.io//blog/</id>
  <author>
    <name><![CDATA[M Sheik Uduman Ali]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Don&#8217;t use elephant for your garden work]]></title>
    <link href="http://udooz.github.io//blog/2014/06/dont-use-elephant-for-your-garden-work/"/>
    <updated>2014-06-19T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2014/06/dont-use-elephant-for-your-garden-work</id>
    <content type="html"><![CDATA[<p>While learning the new Tez engine and query vectorization concepts in Hadoop 2.0, I came to know that the query vectorization is claimed as 3x powerful and consume less CPU time in actual Hadoop cluster. Hortonworks tutorial uses a sample sensor data in a CSV that is imported into Hive. Then a sample has been used to explain the performance.</p>

<p>The intention of this post is neither explaining Tez engine and query vectorization nor Hive query.  Let us familiarize the problem I have worked before get to know the purpose of this post. <img src="http://udooz.net/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>

<p>One sample CSV file called &#8216;HVAC.csv&#8217; contains 8000 records that contain temperature information on different building during different days. Part of the file content:</p>

<p>Date,Time,TargetTemp,ActualTemp,System,SystemAge,BuildingID<br/>
6/1/13,0:00:01,66,58,13,20,4<br/>
6/2/13,1:00:01,69,68,3,20,17<br/>
6/3/13,2:00:01,70,73,17,20,18<br/>
6/4/13,3:00:01,67,63,2,23,15<br/>
6/5/13,4:00:01,68,74,16,9,3<br/>
&#8230;<br/>
In the Hive, following configurations are specified to enable Tez engine and query vectorization.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hive&gt; <span class="nb">set </span>hive.execution.engine<span class="o">=</span>mr<span class="p">;</span>
</span><span class='line'>hive&gt; <span class="nb">set </span>hive.execution.engine<span class="o">=</span>tez<span class="p">;</span>
</span><span class='line'>hive&gt; <span class="nb">set </span>hive.vectorized.execution.enabled<span class="p">;</span>
</span><span class='line'>      hive.vectorized.execution.enabled<span class="o">=</span><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>I execute the following query in my sandbox  that surprisingly took 48 seconds for a &#8216;group by&#8217; and &#8216;count&#8217; on 8000 records as shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">select </span>date, count<span class="o">(</span>buildingid<span class="o">)</span> from hvac_orc group by date<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This query groups the sensor data by date and count the number of building for that date.  It produces 30 results as shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Status: Finished successfully
</span><span class='line'>OK
</span><span class='line'>6/1/13  267
</span><span class='line'>6/10/13 267
</span><span class='line'>6/11/13 267
</span><span class='line'>...
</span><span class='line'>Time taken: 48.261 seconds, Fetched: 30 row<span class="o">(</span>s<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I plan to write simple program without MapReduce castle, since it is just 8000 records. I created a F# script that read the CSV (note that I did not use any CSV type provider) and using Deedle exploratory library (again, LINQ can also help). I achieved the same result as shown below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">ft</span>
</span><span class='line'>
</span><span class='line'><span class="o">#</span><span class="n">I</span> <span class="s">&quot;..</span><span class="err">\</span><span class="s">packages</span><span class="err">\</span><span class="s">Deedle.1.0.0&quot;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s">&quot;Deedle.fsx&quot;</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System.IO</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System.Globalization</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System.Diagnostics</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Deedle</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">hvac</span> <span class="o">=</span> <span class="o">{</span> <span class="n">Date</span> <span class="o">:</span> <span class="n">DateTime</span><span class="o">;</span> <span class="n">BuildingID</span> <span class="o">:</span> <span class="n">int</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nv">execute</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="nv">stopwatch</span> <span class="o">=</span> <span class="nn">Stopwatch</span><span class="p">.</span><span class="n">StartNew</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="nv">enus</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CultureInfo</span><span class="o">(</span><span class="s">&quot;en-US&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="nv">fs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StreamReader</span><span class="o">(</span><span class="s">&quot;..</span><span class="err">\</span><span class="s">ml</span><span class="err">\</span><span class="s">SensorFiles</span><span class="err">\</span><span class="s">HVAC.csv&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="nv">lines</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="n">ReadToEnd</span><span class="bp">()</span> <span class="o">|&gt;</span> <span class="o">(</span><span class="k">fun</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">Split</span><span class="o">(</span><span class="s">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">ToCharArray</span><span class="bp">()</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="nv">ohvac</span> <span class="o">=</span> <span class="n">lines</span><span class="o">.[</span><span class="mi">1</span><span class="o">..(</span><span class="nn">Array</span><span class="p">.</span><span class="n">length</span> <span class="n">lines</span><span class="o">)</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>              <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">Split</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">.</span><span class="n">ToCharArray</span><span class="bp">()</span><span class="o">))</span>
</span><span class='line'>              <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span><span class="n">Date</span> <span class="o">=</span> <span class="nn">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="o">(</span><span class="n">s</span><span class="o">.[</span><span class="mi">0</span><span class="o">],</span> <span class="n">enus</span><span class="o">);</span> <span class="n">BuildingID</span> <span class="o">=</span> <span class="n">int</span><span class="o">(</span><span class="n">s</span><span class="o">.[</span><span class="mi">6</span><span class="o">])})</span>
</span><span class='line'>              <span class="o">|&gt;</span> <span class="nn">Frame</span><span class="p">.</span><span class="n">ofRecords</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="n">ohvac</span><span class="o">.</span><span class="n">GroupRowsBy</span><span class="o">(</span><span class="s">&quot;Date&quot;</span><span class="o">)</span>
</span><span class='line'>              <span class="o">|&gt;</span> <span class="nn">Frame</span><span class="p">.</span><span class="n">getNumericCols</span>
</span><span class='line'>              <span class="o">|&gt;</span> <span class="nn">Series</span><span class="p">.</span><span class="n">mapValues</span> <span class="o">(</span><span class="nn">Stats</span><span class="p">.</span><span class="n">levelCount</span> <span class="n">fst</span><span class="o">)</span>
</span><span class='line'>              <span class="o">|&gt;</span> <span class="nn">Frame</span><span class="p">.</span><span class="n">ofColumns</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">stopwatch</span><span class="o">.</span><span class="n">Stop</span><span class="bp">()</span>
</span><span class='line'>  <span class="o">(</span><span class="n">stopwatch</span><span class="o">.</span><span class="n">ElapsedMilliseconds</span><span class="o">,</span> <span class="n">result</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the FSI,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&gt;</span> <span class="o">#</span><span class="n">load</span> <span class="s">&quot;finalTouch.fsx&quot;</span><span class="o">;;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="k">open</span> <span class="nn">ft</span><span class="o">;;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">ft</span><span class="o">.</span><span class="n">execute</span><span class="o">;;</span>
</span><span class='line'><span class="k">val</span> <span class="n">it</span> <span class="o">:</span> <span class="kt">int64</span> <span class="o">*</span> <span class="nn">Deedle</span><span class="p">.</span><span class="n">Frame</span> <span class="o">=</span>
</span><span class='line'><span class="o">(</span><span class="mi">83L</span><span class="o">,</span>
</span><span class='line'><span class="n">BuildingID</span>
</span><span class='line'><span class="mi">01</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">2013</span> <span class="mi">12</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="n">AM</span> <span class="o">-&gt;</span> <span class="mi">267</span>
</span><span class='line'><span class="mi">02</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">2013</span> <span class="mi">12</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="n">AM</span> <span class="o">-&gt;</span> <span class="mi">267</span>
</span><span class='line'><span class="mi">03</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">2013</span> <span class="mi">12</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="n">AM</span> <span class="o">-&gt;</span> <span class="mi">267</span>
</span><span class='line'><span class="mi">04</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">2013</span> <span class="mi">12</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="n">AM</span> <span class="o">-&gt;</span> <span class="mi">267</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The is completed within 83 milliseconds. You may argue that I comparing apple with orange. No!.  My intention is to understand when MapReduce is the savior.  The parable of the above exercise is that be cautious and analyze well before moving your data processing mechanisms into MapReduce clusters.</p>

<blockquote><p>Elephants are very effective in labor requiring hard slogging and heavy lifting. Not for your gardens!! <img src="http://udooz.net/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>

<p>Note that the sample CSV files from HortonWorks is clearly for training purpose. This blog post just take that as an example to project the maximum data-generation capability of a small or medium size application for a period. The above script may not scale and will not perform well with more than the above numbers. Hence, this is not anti-MapReduce proposal.</p></blockquote>

<p><a style="display: none;" href="http://www.codeproject.com" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unpacking Apache Storm in developer box]]></title>
    <link href="http://udooz.github.io//blog/2014/04/unpacking-apache-storm-in-developer-box/"/>
    <updated>2014-04-18T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2014/04/unpacking-apache-storm-in-developer-box</id>
    <content type="html"><![CDATA[<p>It is a long time pending task to evaluate and learn Apache Storm. Storm infrastructure needs Nimbus and Zookeeper.</p>

<p>My intention is to install Storm in my regular Ubuntu single box instead of any cluster environment/VMs, the reason is Apache Storm is just a jar file.</p>

<p>Zookeeper was already installed in my machine as single-cluster mode. I already have other prerequisites Java 6 or greater and Python 2.6.6 or greater.</p>

<p>I simply extract apache-storm-0.9.1-incubating.tar.gz into my app directory. We need to play around with two directories as like<br/>
apache-storm-0.9.1<br/>
|_<strong>_</strong> bin<br/>
|_<strong>_</strong> conf</p>

<p>Update the following settings in conf/storm.yaml.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>storm.zookeeper.servers:
</span><span class='line'>    - <span class="s2">&quot;127.0.0.1&quot;</span>
</span><span class='line'>storm.zookeeper.port: 9191
</span><span class='line'>storm.local.dir: <span class="s2">&quot;/mnt/storm&quot;</span>
</span><span class='line'>nimbus.host: <span class="s2">&quot;127.0.0.1&quot;</span>
</span><span class='line'>supervisor.slots.ports:
</span><span class='line'>   - 6700
</span><span class='line'>   - 6701
</span><span class='line'>   - 6702
</span><span class='line'>   - 6703
</span></code></pre></td></tr></table></div></figure>




<p>
  Open three terminal windows, switch to super user and type the following commands respectively from the bin folder.
</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./storm dev-zookeeper
</span><span class='line'>./storm nimbus
</span><span class='line'>./storm supervisor
</span><span class='line'>./storm ui
</span></code></pre></td></tr></table></div></figure>




<p>
  The last command opens Storm UI portal at localhost:8080 in browser.
</p>




<p>
  <a style="display: none;" href="http://www.codeproject.com" rel="tag">CodeProject</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review &#8211; Heroku up and running by Neil &#038; Richard &#8211; O&#8217;Reilly]]></title>
    <link href="http://udooz.github.io//blog/2013/07/book-review-heroku-up-and-running-by-neil-richard-oreilly/"/>
    <updated>2013-07-29T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2013/07/book-review-heroku-up-and-running-by-neil-richard-oreilly</id>
    <content type="html"><![CDATA[<p>&nbsp;</p>

<div id="__tbSetup">
</div>


<p><a href="http://udooz.github.io//blog/images/2013/07/hrk_rc_cat.gif" rel="prettyPhoto[573]"><img class="alignnone size-full wp-image-575" alt="hrk_rc_cat" src="http://udooz.github.io//blog/images/2013/07/hrk_rc_cat.gif" width="180" height="236" /></a></p>

<p>Neil is a Ruby developer and deploying many applications in Heroku.  His book &#8220;Heroku Up and Running&#8221; is in early release stage.  Most of the contents are ready and hence review has been made.</p>

<p>As like Heroku ecosystem&#8217;s simplicity, this book has only 100 pages with 8 chapters.</p>

<p>As a cloud developer, the first chapter &#8220;What is Heroku&#8221; is bit bored.  The second chapter &#8220;How Heroku Works&#8221; is pretty straightforward, simple and nicely written.  A conceptual/flow diagram is the only missing point.  Reader has to go with full load of text.  The third chapter explains performance and scalability on &#8220;Dynos&#8221; and Postgres database.  It is worth read.</p>

<p>Chapter 4 covers Heroku Regions &#8211; Is it that much worth?</p>

<p>Chapter 5 is fully dedicated for Postgres which is helpful for the respective people.  It is a good resource.</p>

<p>Chapter 6 starts with deployment best practices followed by &#8220;HOWTO&#8221;.  It is well written.</p>

<p>Chapter 7 and 8 are really much needed for any people who want to deploy their app on Heroku.  Neil really puts good effort to on these two chapters to differentiate highly from Heroku manual. <img src="http://udooz.net/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>

<p>The book would be even better if it provide some simple samples than syntax examples.</p>

<p>This book gives me mixed feeling but I suggest this book for its chapter 6, 7, and 8.</p>

<p>You can buy this book at <a href="http://shop.oreilly.com/product/0636920027409.do">http://shop.oreilly.com/product/0636920027409.do</a></p>

<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review &#8211; See What I Mean &#8211; O&#8217;Reilly]]></title>
    <link href="http://udooz.github.io//blog/2013/07/book-review-see-what-i-mean-oreilly/"/>
    <updated>2013-07-15T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2013/07/book-review-see-what-i-mean-oreilly</id>
    <content type="html"><![CDATA[<p><a href="http://udooz.github.io//blog/images/2013/07/cat.gif" rel="prettyPhoto[562]"><img class="alignnone size-full wp-image-563" title="cat" src="http://udooz.github.io//blog/images/2013/07/cat.gif" alt="" width="180" height="270" /></a></p>

<p>For techies, this book might not be the regular lunch.</p>

<p>It is my long wish to express my learning through mind-friendly way like comics and videos.  Couple of years before, I used Pixton.com and written a blog post <a href="http://udooz.net/blog/2010/12/wcf-sts-federation-claims/">http://udooz.net/blog/2010/12/wcf-sts-federation-claims/</a>.  After that, I simply left that direction due to lack of comic plots. It is quite surprised when I saw this book in O&#8217;Reilly that teaches you how to draw comics on yourself with paper and pencil.</p>

<p>Good part is this book do not bore you with comprehensive text, instead with nice comics.</p>

<p>Properties of Comics explains the comic formats and four properties of comics followed by a chapter explains face theory (!) and properties.  Writing the story is one of my favorite chapter where there is a crash course in Script writing.</p>

<p>Last 5 chapters explains layout, drawing/refining and application in real world.</p>

<p>Recommend this book to seasoned technical bloggers and presenters.  Convey your thoughts more user (mind) friendly way.</p>

<p>Buy this book at <a href="http://shop.oreilly.com/product/9781933820279.do" target="_blank"><a href="http://shop.oreilly.com/product/9781933820279.do">http://shop.oreilly.com/product/9781933820279.do</a></a>.</p>

<div id="__tbSetup">
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adopting Event Sourcing in SaaS using Windows Azure]]></title>
    <link href="http://udooz.github.io//blog/2013/07/adopting-event-sourcing-in-saas-using-windows-azure/"/>
    <updated>2013-07-15T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2013/07/adopting-event-sourcing-in-saas-using-windows-azure</id>
    <content type="html"><![CDATA[<div id="__tbSetup">
</div>


<blockquote><p><div>
  This blog post was originally published at <a href="http://blog.aditi.com/cloud/adopting-event-sourcing-saas-windows-azure/" target="_blank"><a href="http://blog.aditi.com/cloud/adopting-event-sourcing-saas-windows-azure/">http://blog.aditi.com/cloud/adopting-event-sourcing-saas-windows-azure/</a></a>.
</div></p></blockquote>

<div>
  People in the enterprise application development and strong attachment with relational world feel ill-chosen when suggesting to adopt event sourcing.  There are some reasons for that.  This blog post specifies you the candidate places in SaaS development using Windows Azure where event sourcing will be useful.  Before that let us understand what is event sourcing.</p> <h2>
    Event Sourcing
  </h2>
  
  <p>
    Let us take an order management SaaS system as depicted in the below figure.
  </p>
  
  <p>
    <a href="http://udooz.github.io//blog/images/2013/07/1_domainmodel.png" rel="prettyPhoto[567]"><img class="alignnone  wp-image-568" title="1_domainmodel" src="http://udooz.github.io//blog/images/2013/07/1_domainmodel.png" alt="" width="716" height="223" /></a>
  </p>
  
  <p>
    Assume that <em>Order</em> is the main entity (in DDD world, this is further specialized as “AggregateRoot” or simply “Aggregate”).  Whenever, a request to make an order in this system through service layer, a lifecycle of an Order instance will be started.  It is started with OrderQuoted and ends with OrderShipped/OrderReturned.
  </p>
  
  <p>
    In the typical relational world, we will persist the order instance as
  </p>
  
  <table width="633" border="1" cellspacing="0" cellpadding="0">
    <tr>
      <td valign="top" width="47">
        PKey
      </td>
      
      <td valign="top" width="123">
        Order ID
      </td>
      
      <td valign="top" width="142">
        Status
      </td>
      
      <td valign="top" width="113">
        ModifiedBy
      </td>
      
      <td valign="top" width="208">
        ModifiedOn
      </td>
    </tr>
    
    <tr>
      <td valign="top" width="47">
        <strong>1</strong>
      </td>
      
      <td valign="top" width="123">
        <strong>OD30513080515</strong>
      </td>
      
      <td valign="top" width="142">
        <strong>OrderBooked</strong>
      </td>
      
      <td valign="top" width="113">
        <strong>Sheik</strong>
      </td>
      
      <td valign="top" width="208">
        <strong>2013-06-16 12:35PM</strong>
      </td>
    </tr>
    
    <tr>
      <td valign="top" width="47">
        2
      </td>
      
      <td valign="top" width="123">
        OD20616150941
      </td>
      
      <td valign="top" width="142">
        OrderShipped
      </td>
      
      <td valign="top" width="113">
        John
      </td>
      
      <td valign="top" width="208">
        2013-05-22 10:00 AM
      </td>
    </tr>
    
    <tr>
      <td valign="top" width="47">
        ..
      </td>
      
      <td valign="top" width="123">
        ..
      </td>
      
      <td valign="top" width="142">
        ..
      </td>
      
      <td valign="top" width="113">
        ..
      </td>
      
      <td valign="top" width="208">
        ..
      </td>
    </tr>
  </table>
  
  <p>
    If the order OD30513080515 is delivered, then we will simply update the record # 1 as
  </p>
  
  <table width="633" border="1" cellspacing="0" cellpadding="0">
    <tr>
      <td valign="top" width="47">
        <strong>1</strong>
      </td>
      
      <td valign="top" width="123">
        OD30513080515
      </td>
      
      <td valign="top" width="142">
        <strong>OrderDelivered</strong>
      </td>
      
      <td valign="top" width="113">
        Milton
      </td>
      
      <td valign="top" width="208">
        2013-06-18 02:10PM
      </td>
    </tr>
  </table>
  
  <p>
    The Event Sourcing approach enforces to persist domain object using an immutable schema.  In this case, the data store will look like:
  </p>
  
  <table width="633" border="1" cellspacing="0" cellpadding="0">
    <tr>
      <td valign="top" width="47">
        DbId
      </td>
      
      <td valign="top" width="123">
        Order ID
      </td>
      
      <td valign="top" width="142">
        Status
      </td>
      
      <td valign="top" width="113">
        ModifiedBy
      </td>
      
      <td valign="top" width="208">
        ModifiedOn
      </td>
    </tr>
    
    <tr>
      <td valign="top" width="47">
        <strong>1</strong>
      </td>
      
      <td valign="top" width="123">
        <strong>OD30513080515</strong>
      </td>
      
      <td valign="top" width="142">
        <strong>OrderBooked</strong>
      </td>
      
      <td valign="top" width="113">
        <strong>Sheik</strong>
      </td>
      
      <td valign="top" width="208">
        <strong>2013-06-16 12:35PM</strong>
      </td>
    </tr>
    
    <tr>
      <td valign="top" width="47">
        2
      </td>
      
      <td valign="top" width="123">
        OD20616150941
      </td>
      
      <td valign="top" width="142">
        OrderShipped
      </td>
      
      <td valign="top" width="113">
        John
      </td>
      
      <td valign="top" width="208">
        2013-05-22 10:00 AM
      </td>
    </tr>
    
    <tr>
      <td valign="top" width="47">
        ..
      </td>
      
      <td valign="top" width="123">
        ..
      </td>
      
      <td valign="top" width="142">
        ..
      </td>
      
      <td valign="top" width="113">
        ..
      </td>
      
      <td valign="top" width="208">
        ..
      </td>
    </tr>
    
    <tr>
      <td valign="top" width="47">
        1
      </td>
      
      <td valign="top" width="123">
        <strong>OD30513080515</strong>
      </td>
      
      <td valign="top" width="142">
        <strong>OrderDelivered</strong>
      </td>
      
      <td valign="top" width="113">
        <strong>Milton</strong>
      </td>
      
      <td valign="top" width="208">
        <strong>2013-06-18 02:10PM</strong>
      </td>
    </tr>
  </table>
  
  <p>
    You are now under the impression that event sourcing is nothing but audit log and if this approach is taken in the main stream database we will be end up with underperforming query and unnecessary database size.  Let us understand the benefits of event sourcing before discussing these concerns:
  </p>
  
  <ul>
    <li>
      Business sometimes needs tracking changes with relevant information happened in the entity during its lifecycle.  For example, before shipping the order, if the system allows the customer to add or remove items in the order, “OrderItemChanged” will play important role to recalculate pricing by track back to the previous “OrderItemChanged” events.
    </li>
    <li>
      With the immutable persistent model, this would be a fault tolerance mechanisms so that at any point in time we can reconstruct the whole system or to a particular point by rewinding the events happened on a particular entity.
    </li>
    <li>
      Data analytics
    </li>
  </ul>
  
  <p>
    The above two points keep specifying the term “event”.  A business system is nothing but performing commands (technically Create, Update, and Delete operations) on business entities.  Events will be raised as a yield of these operations.  For example, making an order in the above SaaS system will create an event OrderBooked with following facts:
  </p>
  
  <p>
    {
  </p>
  
  <p>
    &#8220;name&#8221; : &#8220;orderBooked&#8221;,
  </p>
  
  <p>
    &#8220;entity&#8221; : &#8220;Order&#8221;,
  </p>
  
  <p>
    &#8220;occrredOn&#8221; : &#8220;2013-06-16 12:35PM&#8221;,
  </p>
  
  <p>
    &#8220;orderDetail&#8221; : {
  </p>
  
  <p>
    &#8220;orderId&#8221; : &#8220;OD30513080515&#8243;,
  </p>
  
  <p>
    &#8220;orderItems&#8221; : [{ &#8220;productId&#8221; : &#8220;PR1234&#8221;, &#8220;quantity&#8221; : 1}] <p>
      }
    </p>
    
    <p>
      }
    </p>
    
    <p>
      In the distributed domain driven design approach, the above domain event will be published by Order aggregate and the service layer receives the event and publish itself to the direct event handler or via event publisher.  One of the main subscriber could be a event store subscriber that persist the event into the event store.  The event can also be published to an enterprise service bus so that it can be subscribed and handled by wide variety of other subscribers.  Most likely the schema for an event store looks like below:
    </p>
    
    <p>
      <a href="http://udooz.github.io//blog/images/2013/07/2_scheme.png" rel="prettyPhoto[567]"><img class="alignnone size-full wp-image-569" title="2_scheme" src="http://udooz.github.io//blog/images/2013/07/2_scheme.png" alt="" width="656" height="285" /></a>
    </p>
    
    <p>
      The various implementations of event sourcing use different terminologies and slightly different schema.  <em>For example, main stream event sourcing implementation will have the whole aggregate object itself on every change.</em>
    </p>
    
    <p>
      Hence, event sourcing has following characteristics:
    </p>
    
    <ul>
      <li>
        Every event should give a fact about that and it should be atomic
      </li>
      <li>
        The data should be “immutable”
      </li>
      <li>
        Every event should be “identifiable”
      </li>
    </ul>
    
    <h2>
      In the SaaS World
    </h2>
    
    <p>
      By this time, you understand that event sourcing is not “one size fit for all”.  Particularly, in the enterprise world.  Based on the SaaS system and organization eco system, you can suggest different methodologies:
    </p>
    
    <ul>
      <li>
        Use Event Store as main stream data store and use query friendly view data stores such as document or column friendly databases.  This would handle all queries from client systems.  This is likely to be CQRS approach.
      </li>
      <li>
        Enterprises where you feel relational is the right candidate for main stream database, then use event store as a replacement for audit log, if the system and regulations permit.  This would help you to address the use cases where past event tracking is the business requirement.
      </li>
    </ul>
    
    <h2>
      Right storage mechanism in Windows Azure
    </h2>
    
    <p>
      When you are building applications in Windows Azure, you have three official storage options as of now.  Let us see these a whole:
    </p>
    
    <table border="1" cellspacing="0" cellpadding="0">
      <tr>
        <td valign="top" width="46">
          S.No
        </td>
        
        <td valign="top" width="180">
          Storage
        </td>
        
        <td valign="top" width="189">
          Pros
        </td>
        
        <td valign="top" width="189">
          Cons
        </td>
      </tr>
      
      <tr>
        <td valign="top" width="46">
          1
        </td>
        
        <td valign="top" width="180">
          Blob Storage
        </td>
        
        <td valign="top" width="189">
          Flexible and simple to implement the above mentioned schema
        </td>
        
        <td valign="top" width="189">
          Majorly none
        </td>
      </tr>
      
      <tr>
        <td valign="top" width="46">
          2
        </td>
        
        <td valign="top" width="180">
          Table Storage
        </td>
        
        <td valign="top" width="189">
          Read friendly
        </td>
        
        <td valign="top" width="189">
          Unfriendly for write when you take different serialization approach for event body apart from simple JSON serialization.
        </td>
      </tr>
      
      <tr>
        <td valign="top" width="46">
          3
        </td>
        
        <td valign="top" width="180">
          Windows Azure SQL
        </td>
        
        <td valign="top" width="189">
          Based on your relational schema, this could be read and write friendly
        </td>
        
        <td valign="top" width="189">
          Lacks scalability</p> <p>
            Cost</td> </tr> </tbody> </table> <h2>
              Summary
            </h2>
            
            <p>
              Event sourcing is more than just an audit log that can be well adopted into SaaS system.  You should take right approach on how to use this in your system.  Windows Azure blob storage is one of the nice option as of now since there is no native document or column oriented database support in Windows Azure.
            </p>
            
            <p>
              Few event sourcing frameworks in .NET:
            </p>
            
            <p>
              <a href="https://github.com/NEventStore/NEventStore">https://github.com/NEventStore/NEventStore</a>
            </p>
            
            <p>
              <a href="https://github.com/elliotritchie/NES">https://github.com/elliotritchie/NES</a>
            </p></div>


<pre><code>        &lt;p&gt;
        &lt;/p&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: Python for Data Analysis by Wes &#8211; O&#8217;Reilly]]></title>
    <link href="http://udooz.github.io//blog/2012/12/book-review-python-for-data-analysis-wes-oreilly/"/>
    <updated>2012-12-27T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2012/12/book-review-python-for-data-analysis-wes-oreilly</id>
    <content type="html"><![CDATA[<p><a href="http://udooz.github.io//blog/images/2012/12/rc_cat.gif" rel="prettyPhoto[551]"><img class="alignnone size-full wp-image-552" title="rc_cat" src="http://udooz.github.io//blog/images/2012/12/rc_cat.gif" alt="" width="180" height="236" /></a></p>

<p>Python getting become the heart of data analysis works.  You can see variety of books taught machine learning, data analysis and big data processing based on Python.  To get into that world, this book is the basic to learn Python ecosystem for data analysis.</p>

<p>Pandas is one of the notable data analysis library along with the famous NumPy and SciPy libraries.  Wes McKinney who has implemented Pandas has written this book.</p>

<p>As a primer for data analysis, this book has been well written.  With the enough sample data for learning purpose, Wes explains NumPy, Pandas and matplotlib libraries in addition to the knowledge required on file handling, data loading, storage, wrangling and aggregation.</p>

<p>Wes spent a worthy spaces for IPython &#8211; an elegant command line IDE for Python data analysis.</p>

<p>As a basic learning book, notable effort taken for the sample data like MovieLens, US Baby Names, USD food database.  These helps the reader to understand those libraries practically.</p>

<p>Sometime you may get a feel of 470 pages is a very detail oriented for just learning Python libraries.  It is up to your comfort level to make short cut.</p>

<p><strong>Python for Data Analysis would be your first and good stepping stone</strong> for to work on &#8220;Data Analysis or Machine Learning&#8221; field.  This book is worth buy.</p>

<p>For book details: <a href="http://shop.oreilly.com/product/0636920023784.do" target="_blank"><a href="http://shop.oreilly.com/product/0636920023784.do">http://shop.oreilly.com/product/0636920023784.do</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorization request signing for Windows Azure Storage REST API from PowerShell]]></title>
    <link href="http://udooz.github.io//blog/2012/11/authorization-request-signing-for-windows-azure-storage-rest-api-from-powershell/"/>
    <updated>2012-11-17T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2012/11/authorization-request-signing-for-windows-azure-storage-rest-api-from-powershell</id>
    <content type="html"><![CDATA[<p>Recently, while working on one of the Windows Azure migration engagement, we were need to have a simple and portable utility scripts that manipulate on various Windows Azure Storage (WAS) services APIs like &#8220;Get all blob metadata details from selected containers&#8221;.  This is further enabled to perform various manipulations for the business.</p>

<p>There are various options like LINQPad queries, WAPPSCmdlets or Azure Storage Explorer + Fiddler.  However, in-terms of considering the computation post to the WAS invocation, repetitiveness of the work and considering the various type of users environment, simple PowerShell script is the option.  So, I have decided to write simple PowerShell script using WAS REST API.  This does not require any other snap-in or WAS storage client assemblies. (Re-inventing the wheel?!)</p>

<p>One of the main hurdle is creating Authorization header (signing the request).  It should contains the following:</p>

<ul>
<li>HTTP verb</li>
<li>all standard HTTP headers, or empty line instead (canonicalized headers)</li>
<li>the URI for the storage service (canonicalized resource)</li>
</ul>


<p>A sample string for the signing mentioned below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div id="LC1">GET\n /*HTTP Verb*/&lt;/div>
</span><span class='line'>&lt;div id="LC2">\n /*Content-Encoding*/&lt;/div>
</span><span class='line'>&lt;div id="LC3">\n /*Content-Language*/&lt;/div>
</span><span class='line'>&lt;div id="LC4">\n /*Content-Length*/&lt;/div>
</span><span class='line'>&lt;div id="LC5">\n /*Content-MD5*/&lt;/div>
</span><span class='line'>&lt;div id="LC6">\n /*Content-Type*/&lt;/div>
</span><span class='line'>&lt;div id="LC7">\n /*Date*/&lt;/div>
</span><span class='line'>&lt;div id="LC8">\n /*If-Modified-Since */&lt;/div>
</span><span class='line'>&lt;div id="LC9">\n /*If-Match*/&lt;/div>
</span><span class='line'>&lt;div id="LC10">\n /*If-None-Match*/&lt;/div>
</span><span class='line'>&lt;div id="LC11">\n /*If-Unmodified-Since*/&lt;/div>
</span><span class='line'>&lt;div id="LC12">\n /*Range*/&lt;/div>
</span><span class='line'>&lt;div id="LC13">x-ms-date:Sun, 11 Oct 2009 21:49:13 GMT\nx-ms-version:2009-09-19\n /*CanonicalizedHeaders*/&lt;/div>
</span><span class='line'>&lt;div id="LC14">/udooz/photos/festival\ncomp:metadata\nrestype:container\ntimeout:20 /*CanonicalizedResource*/&lt;/div></span></code></pre></td></tr></table></div></figure>


<p>Read <a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd179428.aspx" target="_blank"><a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd179428.aspx">http://msdn.microsoft.com/en-us/library/windowsazure/dd179428.aspx</a></a> and particularly the section <a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd179428.aspx#Constructing_Element" target="_blank"><a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd179428.aspx#Constructing_Element">http://msdn.microsoft.com/en-us/library/windowsazure/dd179428.aspx#Constructing_Element</a></a> for request signing of &#8220;Authorization&#8221; header.</p>

<p>I have written a simple and dirty PowerShell function for blob metadata access.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">function</span> <span class="n">Generate-AuthString</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">param</span><span class="p">(</span>
</span><span class='line'><span class="no">[string]</span><span class="nv">$url</span>
</span><span class='line'><span class="p">,</span><span class="no">[string]</span><span class="nv">$accountName</span>
</span><span class='line'><span class="p">,</span><span class="no">[string]</span><span class="nv">$accountKey</span>
</span><span class='line'><span class="p">,</span><span class="no">[string]</span><span class="nv">$requestUtcTime</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$uri</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Uri</span> <span class="n">-ArgumentList</span> <span class="nv">$url</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$authString</span> <span class="p">=</span><span class="err">  </span> <span class="s2">&quot;GET</span><span class="p">$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nv">$authString</span> <span class="p">+=</span> <span class="s2">&quot;x-ms-date:&quot;</span> <span class="p">+</span> <span class="nv">$requestUtcTime</span> <span class="p">+</span> <span class="s2">&quot;</span><span class="p">$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nv">$authString</span> <span class="p">+=</span> <span class="s2">&quot;x-ms-version:2011-08-18&quot;</span> <span class="p">+</span> <span class="s2">&quot;</span><span class="p">$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nv">$authString</span> <span class="p">+=</span> <span class="s2">&quot;/&quot;</span> <span class="p">+</span> <span class="nv">$accountName</span> <span class="p">+</span> <span class="nv">$uri</span><span class="p">.</span><span class="n">AbsolutePath</span> <span class="p">+</span> <span class="s2">&quot;</span><span class="p">$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nv">$authString</span> <span class="p">+=</span> <span class="s2">&quot;comp:list</span><span class="p">$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nv">$authString</span> <span class="p">+=</span> <span class="s2">&quot;include:snapshots,uncommittedblobs,metadata</span><span class="p">$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nv">$authString</span> <span class="p">+=</span> <span class="s2">&quot;restype:container</span><span class="p">$(</span><span class="no">[char]</span><span class="n">10</span><span class="p">)</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nv">$authString</span> <span class="p">+=</span> <span class="s2">&quot;timeout:90&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$dataToMac</span> <span class="p">=</span> <span class="no">[System.Text.Encoding]</span><span class="p">::</span><span class="n">UTF8</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="nv">$authString</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$accountKeyBytes</span> <span class="p">=</span> <span class="no">[System.Convert]</span><span class="p">::</span><span class="n">FromBase64String</span><span class="p">(</span><span class="nv">$accountKey</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$hmac</span> <span class="p">=</span> <span class="nb">new-object</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">HMACSHA256</span><span class="p">((,</span><span class="nv">$accountKeyBytes</span><span class="p">))</span>
</span><span class='line'><span class="no">[System.Convert]</span><span class="p">::</span><span class="n">ToBase64String</span><span class="p">(</span><span class="nv">$hmac</span><span class="p">.</span><span class="n">ComputeHash</span><span class="p">(</span><span class="nv">$dataToMac</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&nbsp;</p>

<blockquote><p>Use [char] 10 for new-line, instead of &#8220;`r`n&#8221;.</p></blockquote>

<p>Now, you need to add &#8220;Authorization&#8221; header while making the request.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="no">[System.Net.HttpWebRequest]</span> <span class="nv">$request</span> <span class="p">=</span> <span class="no">[System.Net.WebRequest]</span><span class="p">::</span><span class="n">Create</span><span class="p">(</span><span class="nv">$url</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$request</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s2">&quot;Authorization&quot;</span><span class="p">,</span> <span class="s2">&quot;SharedKey &quot;</span> <span class="p">+</span> <span class="nv">$accountName</span> <span class="p">+</span> <span class="s2">&quot;:&quot;</span> <span class="p">+</span> <span class="nv">$authHeader</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complete script is available at my GitHub repo <a href="https://github.com/udooz/powerplay/blob/master/README.md" target="_blank"><a href="https://github.com/udooz/powerplay/blob/master/README.md">https://github.com/udooz/powerplay/blob/master/README.md</a></a>.</p>

<p>The real power when accessing REST API from PowerShell is the &#8220;XML processing&#8221;.  I can simply access ListBlob() atom fields like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$xml</span><span class="p">.</span><span class="n">EnumerationResults</span><span class="p">.</span><span class="n">Blobs</span><span class="p">.</span><span class="n">Blob</span>
</span></code></pre></td></tr></table></div></figure>


<p>Happy Coding.<br/>
<a style="display: none;" href="http://www.codeproject.com" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: Cloud Architecture Patterns by Bill Wilder &#8211; O&#8217;Reilly]]></title>
    <link href="http://udooz.github.io//blog/2012/11/book-review-cloud-architecture-patterns/"/>
    <updated>2012-11-14T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2012/11/book-review-cloud-architecture-patterns</id>
    <content type="html"><![CDATA[<p><a href="http://udooz.github.io//blog/images/2012/11/cat.gif" rel="prettyPhoto[526]"><img class="alignnone size-full wp-image-527" title="cat" src="http://udooz.github.io//blog/images/2012/11/cat.gif" alt="" width="180" height="236" /></a></p>

<p>Bill Wilder who is a MVP in Windows Azure has taken nice initiative in the cloud computing space with cloud architecture patterns.  Good collections.</p>

<p>Cloud computing relatively new and evolving technology, where we are facing so many recurred problems when dealing with application migration.  Bill introduces the basic tenants of cloud computing and design principles as Cloud Computing architecture patterns in this book.  There are 14 basic and common cloud computing patterns in this book.</p>

<p>The whole chapter 1 discusses on Scalability in depth.  I really liked his explanation on Performance vs Scalability.  Also, he listed out the characteristics of Cloud-Native applications.</p>

<p>Though it is not well fit into &#8216;pattern&#8217;, Horizontally Scaling Compute pattern discusses all design and anti-design aspects.  The Queue-centric workflow discusses the loosely coupled aspects.  It covers the asynchronous programming characteristics of cloud-native applications.  However, asynchronous and end user responsiveness related problems not covered in this, or as a different pattern.</p>

<p>He well touched the CAP theorem, sharding, fan-out quite well.  The multitenancy pattern can be explained much more better way.</p>

<p>The colocate and valet key patterns are nicely covered efficient use of network and trust with third party service integration.</p>

<p>The patterns try at best to vendor-neutral.  Fortunately, it lights up more on Windows Azure.</p>

<p>This book is very useful for people who are new to cloud computing space and going to construct/migrate application on this.</p>

<p>For well experts and people who have already spend their life on cloud computing, would be a refresher.</p>

<p>Well attempt for basic cloud computing architecture concepts.</p>

<p>You can buy this book at <a href="http://shop.oreilly.com/product/0636920023777.do" target="_blank"><a href="http://shop.oreilly.com/product/0636920023777.do">http://shop.oreilly.com/product/0636920023777.do</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WAS StartCopyFromBlob operation and Transaction Compensation]]></title>
    <link href="http://udooz.github.io//blog/2012/11/azure-startcopyfromblob-transaction-compensation/"/>
    <updated>2012-11-12T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2012/11/azure-startcopyfromblob-transaction-compensation</id>
    <content type="html"><![CDATA[<p>The latest Windows Azure SDKs v1.7.1 and 1.8  have a nice feature called &#8220;<a href="http://msdn.microsoft.com/en-us/library/jj682832.aspx" target="_blank">StartCopyFromBlob</a>&#8221; that enables us to instruct Windows Azure data center to perform cross-storage accounts blob copy.  Prior to this, we need to download chunks of blob content then upload into the destination storage account.  Hence, &#8220;StartCopyFromBlob&#8221; is more efficient in terms of cost and time as well.</p>

<p>The notable difference in version 2012-02-12 is that copy operation is now asynchronous.  It means once you made a copy request to Windows Azure Storage service, it returns a copy ID (a GUID string), copy state and HTTP status code 202 (Accepted).  This means that your request is scheduled.  Post to this call, when you check the copy state immediately, it is most probably in &#8220;pending&#8221; state.</p>

<h2>StartCopyFromBlob &#8211; An TxnCompensation operation</h2>

<p>An extra care is required while using this API, since this is one of the real world transaction compensation service operation.  After making the copy request, you need to verify the actual status of the copy operation at later point in time.  The later point in time would be varied from very few seconds to 2 weeks based on various constraints like source blob size, permission, connectivity, etc.</p>

<p>The figure below shows a typical sequence of StartCopyFromBlob operation invocation.</p>

<p><a href="http://udooz.github.io//blog/images/2012/11/StartCopyBlobSequence.jpg" rel="prettyPhoto[518]"><img class="alignnone  wp-image-521" title="StartCopyBlobSequence" src="http://udooz.github.io//blog/images/2012/11/StartCopyBlobSequence.jpg" alt="" width="600" height="400" /></a></p>

<p>(Click on the above image to see full view)</p>

<p><a href="http://msdn.microsoft.com/en-us/library/jj733014.aspx" target="_blank">CloudBlockBlob</a> and <a href="http://msdn.microsoft.com/en-us/library/microsoft.windowsazure.storage.blob.cloudpageblob.aspx" target="_blank">CloudPageBlob</a> classes in Windows Azure storage SDK v1.8 provide StartCopyFromBlob() method which in turn calls the WAS REST service operation (<a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd894037.aspx" target="_blank"><a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd894037.aspx">http://msdn.microsoft.com/en-us/library/windowsazure/dd894037.aspx</a></a>).  Based on the Windows Azure Storage Team blog post (<a href="http://blogs.msdn.com/b/windowsazurestorage/archive/2012/06/12/introducing-asynchronous-cross-account-copy-blob.aspx" target="_blank"><a href="http://blogs.msdn.com/b/windowsazurestorage/archive/2012/06/12/introducing-asynchronous-cross-account-copy-blob.aspx">http://blogs.msdn.com/b/windowsazurestorage/archive/2012/06/12/introducing-asynchronous-cross-account-copy-blob.aspx</a></a>), this request is placed on internal queue and it returns copy ID and copy state.  The copy ID is an unique ID for the copy operation.  This can be used later to verify the destination blob copy ID and also the way to abort copy operation later point in time.  <a href="http://msdn.microsoft.com/en-us/library/microsoft.windowsazure.storage.blob.copystate.aspx" target="_blank">CopyState</a> gives you copy operation status, number of bytes copying, etc.</p>

<blockquote><p>Note that sequence 3 &#8220;PushCopyBlobMessage&#8221; in the above figure is my assumption about the operation.</p></blockquote>

<h2>ListBlobs &#8211; Way for Compensation</h2>

<p>Although, copy ID is in your hand,  there is no simple API that receives array of copy IDs and to return the appropriate copy states.  Instead, you have to call <a href="http://msdn.microsoft.com/en-us/library/microsoft.windowsazure.storage.blob.cloudblobcontainer_methods.aspx" target="_blank">CloudBlobContainer</a>&#8216;s ListBlobs() or GetXXXBlobReference() to get the copy state.  If the blob is created by the copy operation, then it will have the CopyState.</p>

<blockquote><p>CopyState might be null for blobs that are not created by copy operation</p></blockquote>

<p>The compensation action here is to take what we need to do when a blob copy operation is neither succeeded nor in pending state.  Mostly, the next call of StartCopyFromBlob()  will end up with successful blob copy.  Otherwise, further remedy should be taken.</p>

<h2>Final Words</h2>

<p>It is very pleasure to use StartCopyFromBlob().  It would be much more pleasure, if the SDK or REST version provides simple operations like the following:</p>

<ul>
<li>GetCopyState(string[] copyIDs) : CopyState[]</li>
<li>RetryCopyFromBlob(string failedCopyId) : void</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: Windows PowerShell for Developers by Douglas Finke, O&#8217;Reilly]]></title>
    <link href="http://udooz.github.io//blog/2012/10/book-review-windows-powershell/"/>
    <updated>2012-10-15T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2012/10/book-review-windows-powershell</id>
    <content type="html"><![CDATA[<p><a href="http://udooz.github.io//blog/images/2012/10/cat.gif" rel="prettyPhoto[512]"><img class="alignnone size-full wp-image-513" title="cat" src="http://udooz.github.io//blog/images/2012/10/cat.gif" alt="" width="180" height="236" /></a></p>

<p>Douglas Finke is an MVP for Windows PowerShell.  This one point is enough to say the quality of this book.</p>

<p>When I was started learning and writing Powershell scripts, I really got crazy about that.  It has elegant syntax which will impress both developers and administrators.  Powershell is not just for Administrator.  This book is for developer.  The first 10 chapters cover the following different aspects:</p>

<ul>
<li>Quick introduction</li>
<li>text template transformation</li>
<li>Powershell in UI</li>
<li>Domain specific language using PS</li>
<li>Net.Webclient and Powershell</li>
</ul>


<p>The Chapter 11 covers Powershell 3.0.</p>

<p>The content is concise and clear.  Every chapters taking you in different level.</p>

<p>For beginners, &#8220;Getting Started&#8221; and &#8220;The Dime Tour&#8221; covers PowerShell basics.  This will give you different introduction to the developers, but not at the basic level.</p>

<p>Otherwise, every chapters will impress you like writing &#8220;Ruby&#8221; script in Linux world. <img src="http://udooz.net/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /></p>

<p>If you are a .NET developers, then this would also be in your book shelve in near feature.</p>

<p>Purchase this book at <a href="http://shop.oreilly.com/product/0636920024491.do" target="_blank"><a href="http://shop.oreilly.com/product/0636920024491.do">http://shop.oreilly.com/product/0636920024491.do</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure ServiceBus Message Payload Serialization using protobuf]]></title>
    <link href="http://udooz.github.io//blog/2012/08/azure-servicebus-message-payload-protobuf-serialization/"/>
    <updated>2012-08-07T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2012/08/azure-servicebus-message-payload-protobuf-serialization</id>
    <content type="html"><![CDATA[<p>Choices are between ready made coffee maker and make it ourselves available in Windows Azure kitchen.  As long as we want cappuccino, Windows Azure .NET libraries are good to go in terms of productivity and maintainability.  Sometimes, we may need to prepare blended iced cappuccino.  REST API (the actual service interface to Windows Azure services) is the way for that.  Here, I am talking about Windows Azure ServiceBus queue and how to use custom serialization on message payload (or body).</p>

<h2>My Blended Iced Cappuccino</h2>

<p>One of the best and base element in WCF / .NET serialization is DataContractSerializer.  This is some time nightmare to the developers too.  Though there are various serializers in .NET stack, when SOAP or XML comes into the picture, DataContractSerializer is the natural option. In the ServiceBus brokered messaging, the managed library close the option to use serializer other than DataContractSerializer for message payload.</p>

<p>This is not the common case in the messaging world.  A queue may be designated for receiving document type message or command type message.  For command type messages, DataContractSerializer is fine.  When the message type is document, both sender and receiver can agreed upon specific content-type of the message payload.  For this, REST is the best friend.</p>

<h2>Solution</h2>

<p>To send a message, Windows Azure ServiceBus REST API requires the following:</p>

<ul>
<li>URI &#8211; http{s}://{serviceNamespace}.servicebus.Windows.net/{queue path}/messages</li>
<li>Method &#8211; POST</li>
<li>Header &#8211; Authorization header with WRAP token as value</li>
<li>Request Body &#8211; could be anything</li>
</ul>


<p>If everything going well, this web request returns 201.</p>

<p>To receive the message,</p>

<ul>
<li>URI &#8211; <a href="https://">https://</a>{serviceNamespace}.servicebus.Windows.net/{queue path}/messages/head?timeout={seconds}</li>
<li>Method &#8211; POST (peek n lock) or DELETE (destructive)</li>
<li>Header &#8211; Authorization header with WRAP token as value</li>
</ul>


<p>This would returns message properties (for destructive nothing will be returned) and payload with response code 200.</p>

<p>In this case, there is no restriction on which serialization to be used on message payload.  So, we can use <a href="https://developers.google.com/protocol-buffers/docs/overview" target="_blank">protobuf</a>.  <strong><em>The main reason is content size</em></strong>.  When a sender sends the message with HTTP content-type as application/protobuf,   the receive always gets the message with the same content-type.</p>

<p>In this demonstration, I have created a message payload as shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[ProtoContract]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">[ProtoMember(1)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[ProtoMember(2)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">int</span> <span class="n">Age</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[ProtoMember(3)]</span>
</span><span class='line'><span class="k">public</span> <span class="n">Address</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">[ProtoContract]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Address</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="na">[ProtoMember(1)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">City</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="na">[ProtoMember(2)]</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span> <span class="n">Street</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve decorated &#8220;Person&#8221; class with proto-buf attributes (I have used <a href="http://code.google.com/p/protobuf-net/" target="_blank"><a href="http://code.google.com/p/protobuf-net/">http://code.google.com/p/protobuf-net/</a></a>).</p>

<p>Let us see how we can use protobuf.</p>

<p>Start with two constant declaration,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">const</span> <span class="kt">string</span> <span class="n">ACS_HOST_URI_PART</span> <span class="p">=</span> <span class="s">&quot;accesscontrol.windows.net&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">string</span> <span class="n">SERVICE_BUS_URI_PART</span> <span class="p">=</span> <span class="s">&quot;servicebus.windows.net&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>WRAP access token is required to interact with Azure REST APIs.  Assume, the method CreateWrapToken(&#8230;) will generate based on issuer name and secret.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">string</span> <span class="n">sbAddress</span> <span class="p">=</span> <span class="s">&quot;https://&lt;namespace&gt;.&quot;</span> <span class="p">+</span> <span class="n">SERVICE_BUS_URI_PART</span> <span class="p">+</span> <span class="s">&quot;/&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">string</span> <span class="n">token</span> <span class="p">=</span> <span class="n">CreateWrapToken</span><span class="p">(</span><span class="s">&quot;&lt;namespace&gt;&quot;</span><span class="p">,</span> <span class="s">&quot;&lt;issuer&gt;&quot;</span><span class="p">,</span> <span class="s">&quot;&lt;secret&gt;&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To send a message to a queue,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">request</span> <span class="p">=</span> <span class="n">HttpWebRequest</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="n">sbAddress</span> <span class="p">+</span> <span class="s">&quot;personq/messages&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">request</span><span class="p">.</span><span class="n">Method</span> <span class="p">=</span> <span class="s">&quot;POST&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">request</span><span class="p">.</span><span class="n">Headers</span><span class="p">[</span><span class="n">HttpRequestHeader</span><span class="p">.</span><span class="n">Authorization</span><span class="p">]</span> <span class="p">=</span> <span class="n">token</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="p">(</span><span class="n">MemoryStream</span> <span class="n">mem</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MemoryStream</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Person</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Sheik&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Age</span> <span class="p">=</span> <span class="m">30</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Address</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Address</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">City</span> <span class="p">=</span> <span class="s">&quot;Chennai&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">Street</span> <span class="p">=</span> <span class="s">&quot;Mount Street&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">request</span><span class="p">.</span><span class="n">ContentType</span> <span class="p">=</span> <span class="s">&quot;application/protobuf&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="n">request</span><span class="p">.</span><span class="n">GetRequestStream</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Serializer</span><span class="p">.</span><span class="n">Serialize</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;(</span><span class="n">stream</span><span class="p">,</span> <span class="n">person</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="n">request</span><span class="p">.</span><span class="n">GetResponse</span><span class="p">()</span> <span class="k">as</span> <span class="n">HttpWebResponse</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">StatusCode</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The person instance is serialized on the request stream.  To receive a message (here I&#8217;m using destructive approach):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">request</span> <span class="p">=</span> <span class="n">HttpWebRequest</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="n">sbAddress</span> <span class="p">+</span> <span class="s">&quot;personq/messages/head&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">request</span><span class="p">.</span><span class="n">Method</span> <span class="p">=</span> <span class="s">&quot;DELETE&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">request</span><span class="p">.</span><span class="n">Headers</span><span class="p">[</span><span class="n">HttpRequestHeader</span><span class="p">.</span><span class="n">Authorization</span><span class="p">]</span> <span class="p">=</span> <span class="n">token</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">response2</span> <span class="p">=</span> <span class="n">request</span><span class="p">.</span><span class="n">GetResponse</span><span class="p">()</span> <span class="k">as</span> <span class="n">HttpWebResponse</span><span class="p">;</span>
</span><span class='line'><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">response2</span><span class="p">.</span><span class="n">StatusCode</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">stream2</span> <span class="p">=</span> <span class="n">response2</span><span class="p">.</span><span class="n">GetResponseStream</span><span class="p">();</span>
</span><span class='line'><span class="kt">var</span> <span class="n">person2</span> <span class="p">=</span> <span class="n">Serializer</span><span class="p">.</span><span class="n">Deserialize</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;(</span><span class="n">stream2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The person2 contains the deserialized content of Person.</p>

<blockquote><p>If we use data contract serializer, the overall message size 302 bytes.  If we use protobuf, it is just 171 bytes.</p></blockquote>

<p>The code for CreateWrapToken(&#8230;) is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">CreateWrapToken</span><span class="p">(</span><span class="kt">string</span> <span class="n">serviceNamespace</span><span class="p">,</span> <span class="kt">string</span> <span class="n">issuerName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">issuerSecret</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="kt">var</span> <span class="n">acsUri</span> <span class="p">=</span> <span class="s">&quot;https://&quot;</span> <span class="p">+</span> <span class="n">serviceNamespace</span> <span class="p">+</span> <span class="s">&quot;-sb.&quot;</span> <span class="p">+</span> <span class="n">ACS_HOST_URI_PART</span> <span class="p">+</span> <span class="s">&quot;/WRAPv0.9/&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">var</span> <span class="n">realm</span> <span class="p">=</span> <span class="s">&quot;http://&quot;</span> <span class="p">+</span> <span class="n">serviceNamespace</span> <span class="p">+</span> <span class="s">&quot;.&quot;</span> <span class="p">+</span> <span class="n">SERVICE_BUS_URI_PART</span> <span class="p">+</span> <span class="s">&quot;/&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">values</span> <span class="p">=</span> <span class="k">new</span> <span class="n">NameValueCollection</span><span class="p">();</span>
</span><span class='line'><span class="n">values</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;wrap_name&quot;</span><span class="p">,</span> <span class="n">issuerName</span><span class="p">);</span>
</span><span class='line'><span class="n">values</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;wrap_password&quot;</span><span class="p">,</span> <span class="n">issuerSecret</span><span class="p">);</span>
</span><span class='line'><span class="n">values</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;wrap_scope&quot;</span><span class="p">,</span> <span class="n">realm</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">webClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WebClient</span><span class="p">();</span>
</span><span class='line'><span class="kt">byte</span><span class="p">[]</span> <span class="n">response</span> <span class="p">=</span> <span class="n">webClient</span><span class="p">.</span><span class="n">UploadValues</span><span class="p">(</span><span class="n">acsUri</span><span class="p">,</span> <span class="n">values</span><span class="p">);</span>
</span><span class='line'><span class="kt">string</span> <span class="n">responseString</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="n">response</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">responseProperties</span> <span class="p">=</span> <span class="n">responseString</span><span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="sc">&#39;&amp;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">tokenProperty</span> <span class="p">=</span> <span class="n">responseProperties</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Split</span><span class="p">(</span><span class="sc">&#39;=&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">token</span> <span class="p">=</span> <span class="n">Uri</span><span class="p">.</span><span class="n">UnescapeDataString</span><span class="p">(</span><span class="n">tokenProperty</span><span class="p">[</span><span class="m">1</span><span class="p">]);</span>
</span><span class='line'><span class="k">return</span> <span class="s">&quot;WRAP access_token=\&quot;&quot;</span> <span class="p">+</span> <span class="n">token</span> <span class="p">+</span> <span class="s">&quot;\&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: Architecting Mobile Solutions for the Enterprise by Dino Esposito, O&#8217;Reilly]]></title>
    <link href="http://udooz.github.io//blog/2012/07/architecting-mobile-solutions-for-the-enterprise-book-review/"/>
    <updated>2012-07-26T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2012/07/architecting-mobile-solutions-for-the-enterprise-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://udooz.github.io//blog/images/2012/07/cat.gif" rel="prettyPhoto[491]"><img class="alignnone size-full wp-image-492" title="book_cover" src="http://udooz.github.io//blog/images/2012/07/cat.gif" alt="" width="180" height="220" /></a></p>

<p>Dino Esposito is the iconic author in Microsoft Press.  His book &#8220;.NET: Architecting for Enterprise&#8221; is one of my favorite.  Sequel to this, this book covers wide variety of patterns in addition to practical approaches on various mobile development problems.</p>

<p>First six chapters are worthful sharing of mobile development experience.  The remaining five chapters are splendid collections of design patterns for mobile enterprise.  He shared the design approaches, concepts with very neutral way.  He showcases the approaches iPhone, iPad, Android and Windows Phone respectively.  Unlike part is, Silverlight for Windows Phone.  I really expects Windows 8 series.</p>

<p>Chapter 1 starts with various delivery model, cost of various Marketplaces and device detection strategy.  This is the decent start.  No boring theory&#8230;no specific vendor based introduction.  &#8220;Marketplace Tax&#8221; is the eye-opener for mobile developers.</p>

<p>Chapter 2 covers mobile sites vs native applications.  Though this is not very uncommon, he has given some real truth on problem with mobile web site.  Some of the detailed explanation on taking decision between native vs web can be short.</p>

<p>Chapter 3 covers mobile architecture.  It explains some know myths about mobile architecture.  Good start on architecture perspective.  &#8220;Use case for mobile is one of the important step in mobile architecture&#8221; is the excellent point to mention.  Dino explains interestingly about the priority of use cases varied from desktop web site to mobile web site.  When your business requires a mobile web site, Dino highly recommend to have separate application layer for mobile web site.  Multiserving is nicely explained.  I enjoyed the WOW concept.</p>

<p>Dino shares his experience on Chapter 4 about &#8220;Building mobile web sites&#8221;, instead of giving philosophy.  This reaches our mind smoothly.  The way he explained SIP is very practical.  The next two chapters cover HTML 5, jQuery Mobile and Responsive Web design.</p>

<p>The remaining chapters are full-fledged coverage of general patterns, patterns specific to iOS, Android, Windows Phone and PhoneGap.</p>

<p>In this industry, books are still be the main medium.  We may see so many irresponsive and untested philosophy as books.  Dino and Microsoft Press always be cautious about this.  Definitely, this book is MUST HAVE for every mobile developers.  Dino&#8217;s coverage is more truthful, tested and consistent.</p>

<p>Well done Dino.</p>

<p>Purchase this book at <a href="http://shop.oreilly.com/product/0790145336224.do">http://shop.oreilly.com/product/0790145336224.do</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The problem with Pingdom]]></title>
    <link href="http://udooz.github.io//blog/blog/2012/07/the-problem-with-pingdom/"/>
    <updated>2012-07-22T19:13:00+05:30</updated>
    <id>http://udooz.github.io//blog/blog/2012/07/the-problem-with-pingdom</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Time to be Awesome - awesome.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Awesome!&quot;</span> <span class="k">unless</span> <span class="n">lame</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.pingdom.com%20Pingdom">The problem with pingdom.</a></p>

<p>My money&rsquo;s in that office, right? If she start giving me some bullshit about it ain&rsquo;t there, and we got to go someplace else and get it, I&rsquo;m gonna shoot you in the head then and there. Then I&rsquo;m gonna shoot that bitch in the kneecaps, find out where my goddamn money is. She gonna tell me too. Hey, look at me when I&rsquo;m talking to you, motherfucker. You listen: we go in there, and that nigga Winston or anybody else is in there, you the first motherfucker to get shot. You understand?</p>

<blockquote><p>Blockquote is what goes
inside this block here
would you believe that
bullshit?</p></blockquote>

<p>Well, the way they make shows is, they make one show. That show&rsquo;s called a pilot. Then they show that show to the people who make shows, and on the strength of that one show they decide if they&rsquo;re going to make more shows. Some pilots get picked and become television programs. Some don&rsquo;t, become nothing. She starred in one of the ones that became nothing.</p>

<p>The path of the righteous man is beset on all sides by the iniquities of the selfish and the tyranny of evil men. Blessed is he who, in the name of charity and good will, shepherds the weak through the valley of darkness, for he is truly his brother&rsquo;s keeper and the finder of lost children. And I will strike down upon thee with great vengeance and furious anger those who would attempt to poison and destroy My brothers. And you will know My name is the Lord when I lay My vengeance upon thee.</p>

<p>Your bones don&rsquo;t break, mine do. That&rsquo;s clear. Your cells react to bacteria and viruses differently than mine. You don&rsquo;t get sick, I do. That&rsquo;s also clear. But for some reason, you and I react the exact same way to water. We swallow it too fast, we choke. We get some in our lungs, we drown. However unreal it may seem, we are connected, you and I. We&rsquo;re on the same curve, just on opposite ends.</p>

<p>Do you see any Teletubbies in here? Do you see a slender plastic tag clipped to my shirt with my name printed on it? Do you see a little Asian child with a blank expression on his face sitting outside on a mechanical helicopter that shakes when you put quarters in it? No? Well, that&rsquo;s what you see at a toy store. And you must think you&rsquo;re in a toy store, because you&rsquo;re here shopping for an infant named Jeb.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro]]></title>
    <link href="http://udooz.github.io//blog/blog/2012/07/intro/"/>
    <updated>2012-07-22T08:23:00+05:30</updated>
    <id>http://udooz.github.io//blog/blog/2012/07/intro</id>
    <content type="html"><![CDATA[<p>Testing!</p>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sollicitudin, massa eu vestibulum laoreet, nibh ante vulputate lorem, ac lobortis ante tellus eu mi. Duis sem nisi, luctus at feugiat eget, fringilla ut tellus. Nam a molestie justo. Sed pulvinar est vitae tellus semper tincidunt. Fusce euismod luctus lacus nec placerat. Mauris rutrum scelerisque nulla ut tempor. Nunc porttitor posuere mi, aliquet vehicula lorem feugiat in. Ut ut fermentum risus. Aliquam tincidunt ultricies ante sit amet bibendum. Cras nec sapien odio. Duis posuere congue sem, at congue massa faucibus at.</p>

<p>Integer ut sapien eget nisl auctor faucibus ut fermentum arcu. Nunc rutrum urna non risus congue et tristique felis eleifend. Maecenas blandit est eu mauris aliquam aliquet. Quisque porttitor enim eget risus blandit in mollis orci eleifend. Nam malesuada nulla sed lacus elementum placerat accumsan arcu rhoncus. Phasellus feugiat cursus turpis nec facilisis. Duis eget metus arcu, eget commodo velit. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Integer cursus vulputate enim, vel gravida velit faucibus et. Ut a urna vitae tellus cursus rhoncus. Maecenas at odio eget quam cursus elementum. Aliquam vitae eros quis tellus laoreet accumsan sed id lorem. Suspendisse et rutrum leo. Integer scelerisque vestibulum adipiscing. In posuere, libero ac accumsan suscipit, nulla ligula gravida erat, ut tempor odio erat nec sem. Quisque justo ipsum, adipiscing volutpat varius vitae, blandit eget nisi.</p>

<p>Nullam adipiscing neque ac lacus commodo vitae imperdiet dui sollicitudin. Ut ac nunc augue. Nam at sem ut quam commodo aliquet vitae vitae dui. Vivamus scelerisque felis eget dolor cursus feugiat. Phasellus at dui sed lectus scelerisque pretium. Etiam nec massa ut justo vestibulum fringilla ac vitae urna. Morbi tortor erat, tempus sed consectetur at, elementum nec eros. Vivamus mattis arcu a sapien semper non lacinia eros pretium.</p>

<p>Proin ut hendrerit arcu. Maecenas ullamcorper tristique magna vel mattis. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam tincidunt euismod viverra. In sit amet neque turpis. Suspendisse ac sapien mi, id blandit purus. Ut tortor turpis, rutrum ac tempor at, accumsan sit amet erat. Etiam ultricies eleifend dolor, eget tempus justo tristique vitae. In hac habitasse platea dictumst. Aliquam eu enim neque.</p>

<p>Morbi massa lorem, viverra non dictum at, malesuada vel nibh. Nam fermentum lobortis varius. Sed a nulla lacus, quis posuere risus. Nunc id urna libero, quis rutrum mi. In gravida felis urna. Praesent nec dolor ac urna tempor fermentum. Curabitur rutrum arcu et lorem volutpat viverra.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer Review &#8211; Code Simplicity, Max, O&#8217;Reilly]]></title>
    <link href="http://udooz.github.io//blog/2012/06/developer-review-code-simplicity-max-oreilly/"/>
    <updated>2012-06-17T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2012/06/developer-review-code-simplicity-max-oreilly</id>
    <content type="html"><![CDATA[<p><a href="http://udooz.github.io//blog/blog/images/2012/05/s.gif" rel="prettyPhoto[467]"><img class="alignnone size-full wp-image-468" title="s" src="http://udooz.github.io//blog/images/2012/05/s.gif" alt="" width="145" height="190" /></a></p>

<h2>Introduction</h2>

<p>One more theory book on software design and this book explains the simplicity of code.  This book has written by Max who is the Chief Architect of Bugzilla project.  This is a 90 page book with putting some effort on software design, changes to a program, defects and testing.  Howerver, first three chapters make me boring. </p>

<h2>In Detail</h2>

<p>I really got bored with first three chapters, probably I might not be right reader for that part.  Chapter 4 starts with some good coverage on how to justify and value your current design targeted to implement a feature.  Chapter 5 Changes explains three flaws in changes of software code which is the excellent part of this book.  The three flaws have been explained with examples which is normally missed in software theory books.</p>

<p>Chapter 6 DRY is very common, thankfully author took only 3 pages.  Remaining chapters are covered various best practices on Simplicity, avoiding complexity.</p>

<h2>Conclusion</h2>

<p>I have enjoyed chapter 5, partially chapter 4.  Apart from these all the other are common aspects.</p>

<p>You can buy this book at <a href="http://shop.oreilly.com/product/0636920022251.do">http://shop.oreilly.com/product/0636920022251.do</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Circuit Breaker for Windows Azure]]></title>
    <link href="http://udooz.github.io//blog/2012/05/circuit-breaker-for-windows-azure/"/>
    <updated>2012-05-06T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2012/05/circuit-breaker-for-windows-azure</id>
    <content type="html"><![CDATA[<p>No application is in island.  Every application needs to interact with other applications located in remote, or consumes data stored in remote.  Your application should be cautious and handle instability situations while interacting with these remote endpoints.</p>

<p>Various practices and patterns are available for implementing a stable system.  Michael T. Nygard specifies following stability patterns when accessing remote endpoints in his Release It! Book:</p>

<ul>
<li>Timeout – don’t wait for the response against a request after the given time limit</li>
<li>Retry – strategically request repeatedly until success</li>
<li>Circuit Breaker – fail fast if remote refuses and prevent re occurrence</li>
</ul>


<p>These patterns are very much required for applications hosted in cloud.  Azure managed library implements first two patterns on storage service APIs.  This post explains how and when to use Circuit Breaker pattern in Azure.</p>

<h2>Problem</h2>

<p>Generally, a remote endpoint access is happened across the system.  When accessing a remote endpoint, the reliability of the connection might not be consistent.   The timeout and retry policy help to handle this failure, if it has happened for a particular request or very short time connection refuses.  However, there are some situations like cloud services outage or remote endpoint under maintenance, where time out and retry logic could not be a real rescue.   Instead, a quick fail detection mechanism helps the various access points in the system to react quickly.  This would avoid unnecessary remote invocations.</p>

<h3>Example</h3>

<p>Let us take an example.  There is an online flight reservation system hosted in Azure. It uses various flight operators’ databases through their WCF services to determine the availability.  It stores its customer de-tails and their booking information on SQL Azure as depicted in figure below:</p>

<p><a href="http://udooz.github.io//blog/images/2012/05/acb_figure_1.png" rel="prettyPhoto[458]"><img class="alignnone size-full wp-image-476" title="acb_figure_1" src="http://udooz.github.io//blog/images/2012/05/acb_figure_1.png" alt="" width="397" height="334" /></a><br/>
The Flight Reservation System (FRS) should take care of following failures when interacting with these re-mote resources:</p>

<ul>
<li>The flight availability query services (Flight A and Flight B) are unavailable daily between 11:30PM and 11:55PM.</li>
<li>Flight B operator has provided very low SLA, hence frequent connection refuses happened with the system</li>
<li>It is uncommon for SQL Azure outage, but the system should handle it.</li>
<li>Sometime, a specific Azure data center responds slowly, at that time the system should handle it.</li>
</ul>


<p><em>In some cases, subsystem of an application may create, update and delete set of blobs or queue messages.  Another subsystem of the application may require these resources.  Leaving this as it is may results unreliable system.</em></p>

<h2>Forces</h2>

<ul>
<li>Fail fast and handle it gracefully</li>
<li>Prevent reoccurred request to a refused remote invocation</li>
</ul>


<h2>Solution</h2>

<p>The circuit breaker component keeps the recent connection state information for a remote endpoint globally across the system.  It behaves like our residential electrical fuses.  Initially the circuit is in closed state.  If the number of attempt to connect to the remote resource getting failed (retry), circuit breaker will open the circuit to prevent succeeding invocations for a while.  This is called as “trip broken” and circuit breaker is now in open state.  After some time later (threshold time), when a new request made, circuit breaker halfly open the circuit (means tries to made actual connection to the remote), if it is success then close the circuit, otherwise open it.  The attempt and resume policy is global for a remote endpoint.  Hence, unique circuit breaker should exist for every remote endpoint.  The conceptual diagram below depicts this.</p>

<h3><a href="http://udooz.github.io//blog/images/2012/05/acb_figure_2.png" rel="prettyPhoto[458]"><img class="alignnone  wp-image-477" title="acb_figure_2" src="http://udooz.github.io//blog/images/2012/05/acb_figure_2.png" alt="" width="520" height="407" /></a></h3>

<h3>Behavior</h3>

<p>The sequence diagram below explains the typical circuit breaker behavior.</p>

<p><a href="http://udooz.github.io//blog/images/2012/05/acb_figure_3.jpg" rel="prettyPhoto[458]"><img class="alignnone  wp-image-478" title="acb_figure_3" src="http://udooz.github.io//blog/images/2012/05/acb_figure_3-882x1024.jpg" alt="" width="611" height="708" /></a></p>

<p>(click the above diagram for full view)</p>

<p>“Timeout?()”method specifies the connection timeout.  Number of attempt before moving to open state not mentioned in this diagram.  The AttemptReset() method in half open state will happen when a request has been made after some time while circuit breaker is in open state.  This time to make half open state is called as threshold time.</p>

<p>The diagram below shows the various state of the circuit breaker for a remote resource.</p>

<h3><a href="http://udooz.github.io//blog/images/2012/05/acb_figure_4.jpg" rel="prettyPhoto[458]"><img class="alignnone size-full wp-image-479" title="acb_figure_4" src="http://udooz.github.io//blog/images/2012/05/acb_figure_4.jpg" alt="" width="467" height="541" /></a></h3>

<h3>Implementation and Example</h3>

<p>I am started developing a circuit breaker library for Windows Azure, with the following capabilities:</p>

<ul>
<li>Handle various types of remote invocation happens in a typical Azure application like Azure storage services, SQL Azure, Web Request, WCF service invocation.</li>
<li>Automatically find and react to the exceptions those are relevant for circuit breaker concept like <a href="http://msdn.microsoft.com/en-us/library/system.timeoutexception.aspx" target="_blank">TimeoutException</a> for WCF’s <a href="http://msdn.microsoft.com/en-us/library/ms405515.aspx" target="_blank">CommunicationObject</a></li>
<li>All the remote resources are managed by their URIs including differentiating the resources by their sub URIs.</li>
<li>Instead of singleton circuit breaker for a remote resource, maintaining the state for a resource in persistence store like Azure cache, table storage, blob storage.</li>
<li>Allow to define circuit breaker policy for a remote resource globally.</li>
<li>Log the open and half open state of the circuit breaker instances</li>
<li>Allow to define global “Failure Handling Strategy” for a remote resource</li>
</ul>


<p>In this post, I have used the limited scope of Azure Circuit Breaker for easier understanding.  I have a vanilla ASP.NET MVC3 application and a hello world WCF service; both are in same hosted services.  The code for WCF service is shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">HelloService</span> <span class="p">:</span> <span class="n">IHelloService</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="nf">Greet</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;Hello, {0}&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have hosted this service on a worker role and opened TCP/IP port for internal access.  For the demon-stration purpose, I have open this service host one minute and then closed in the WorkerRole’s Run() method as shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="p">(</span><span class="n">ServiceHost</span> <span class="n">host</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ServiceHost</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">HelloService</span><span class="p">)))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// service host initialization code</span>
</span><span class='line'>  <span class="c1">// removed for clarity</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">host</span><span class="p">.</span><span class="n">AddServiceEndpoint</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IHelloService</span><span class="p">),</span> <span class="k">new</span> <span class="n">NetTcpBinding</span><span class="p">(</span><span class="n">SecurityMode</span><span class="p">.</span><span class="n">None</span><span class="p">),</span> <span class="n">endpointurl</span><span class="p">,</span> <span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="n">listenurl</span><span class="p">));</span>
</span><span class='line'>  <span class="n">host</span><span class="p">.</span><span class="n">Open</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromMinutes</span><span class="p">(</span><span class="m">1</span><span class="p">));</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//Trace.WriteLine(&quot;Working&quot;, &quot;Information&quot;);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The circuit breaker policy has been defined in MVC3 app’s Global.asax.cs as shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">CbPolicyBuilder</span>
</span><span class='line'>  <span class="p">.</span><span class="n">For</span><span class="p">(</span><span class="s">&quot;net.tcp://localhost:9001/HelloServiceEndpoint&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Timeout</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">30</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">MaxFailure</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">OpenTripFor</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">30</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Do</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I mentioned, the policy is defined against remote resource URI.  Here, for net.tcp://localhost:9001/HelloServiceEndpoint resource, if the invocation is not successful or no response till 30 seconds (Timeout) attempt only once (MaxFailure) and keep the circuit breaker open for 30 seconds.  After 30 seconds, half-open the circuit breaker, when any connection made.  The policy will be persisted on persistence store and accessed across the application.</p>

<p>The MVC3 app has two controllers named HomeController and AuthorController where this service has been invoked using circuit breaker as shown below</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">//specify the resource access type, here ChannelFactory&lt;T&gt;</span>
</span><span class='line'><span class="n">CircuitBreaker</span><span class="p">&lt;</span><span class="n">ChannelFactory</span><span class="p">&lt;</span><span class="n">IHelloService</span><span class="p">&gt;&gt;</span>
</span><span class='line'>  <span class="c1">// the resource access type instance</span>
</span><span class='line'>  <span class="p">.</span><span class="n">On</span><span class="p">(</span><span class="k">new</span> <span class="n">ChannelFactory</span><span class="p">&lt;</span><span class="n">IHelloService</span><span class="p">&gt;(</span><span class="n">helloServiceBinding</span><span class="p">,</span> <span class="n">epHelloService</span><span class="p">))</span>
</span><span class='line'>  <span class="c1">// made remote invocation</span>
</span><span class='line'>  <span class="p">.</span><span class="n">Execute</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;(</span><span class="n">cf</span> <span class="p">=&gt;</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">helloClient</span> <span class="p">=</span> <span class="n">cf</span><span class="p">.</span><span class="n">CreateChannel</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">helloClient</span><span class="p">.</span><span class="n">Greet</span><span class="p">(</span><span class="s">&quot;Udooz!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="c1">// if everything goes well</span>
</span><span class='line'>  <span class="n">msg</span> <span class="p">=&gt;</span> <span class="n">ViewBag</span><span class="p">.</span><span class="n">Message</span> <span class="p">=</span> <span class="n">msg</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// oops, circuit trip broken</span>
</span><span class='line'>  <span class="n">ex</span> <span class="p">=&gt;</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">ViewBag</span><span class="p">.</span><span class="n">Message</span> <span class="p">=</span> <span class="n">ex</span><span class="p">.</span><span class="n">Message</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The same code has been there in AuthorController. I don&#8217;t give any link to access the Index() action of this controller in the page. Test yourself by giving the URL on the browser.</p>

<h2>Final Note</h2>

<p>You can download the above sample from <a href="http://udooz.net/file-drive/doc_details/25-azurecircuitbreaker.html" target="_blank"><a href="http://udooz.net/file-drive/doc_details/25-azurecircuitbreaker.html">http://udooz.net/file-drive/doc_details/25-azurecircuitbreaker.html</a></a>.  It contains the basic CircuitBreaker library also.  This post does not cover those aspects.  The code has basic design aspects to implement CircuitBreaker for Azure, but does not has production ready state persistence repository implementation and other IoC aspects. The sample uses in-memory state persistence (hence per web/worker role state) and supports WCF ChannelFactory type.</p>

<p>I shall announce the production-ready library once it is completed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer Review &#8211; Machine Learning, Drew &#038; John, O&#8217;Reilly]]></title>
    <link href="http://udooz.github.io//blog/2012/05/review-machine-learning-book-oreilly/"/>
    <updated>2012-05-04T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2012/05/review-machine-learning-book-oreilly</id>
    <content type="html"><![CDATA[<p><a href="http://udooz.github.io//blog/images/2012/04/cat.gif" rel="prettyPhoto[421]"><img class="alignnone size-full wp-image-422" title="cat" src="http://udooz.github.io//blog/images/2012/04/cat.gif" alt="" width="180" height="236" /></a></p>

<h2>Introduction</h2>

<p>It is very interesting to read a hard core computing book from authors those are not in the computing industry.  Their area of studies really make them as right choice for writing this book.  Drew Conway studies international relations, conflicts and terrorism using tools of mathematics, statistics and computer science.  John Myles White in &#8220;how humans make decisions&#8221;.  Obviously, both are Ph.D students.</p>

<p>Machine learning is one of the grooming area in the computing world which is actually a branch of artificial intelligence.  Based on the given data, we can capture characteristics of interest of our unknown underlying probability distribution.  This book thoroughly covers  various disciplines such as classification, ranking, regression, regularization, optimization, etc  with practical examples using &#8220;R&#8221; language.</p>

<h2>In Detail</h2>

<p>If you are a programmer, you may little bit astonished first time to use R.  Later, you will understand that &#8220;R&#8221; is not the language of programming, but excellent companion for people in statistical field.  So, you may not fully comfortable with &#8220;R&#8221; after reading the first chapter &#8220;Using R&#8221;.  Authors also mentioned that &#8220;R remains a relatively niche language, even among experienced programmers&#8221;.  However, It would be good if they explain R syntax and its usage crisp and short in the Appendix section.</p>

<p>The chapter 1 (Using R) and 2 (Data Exploration) make you start the journey slowly with many good theories on data analysis.  The visual explanation of &#8220;data as rectangle&#8221;, MxN matrix of data into single row or single column view are good learning.  Inferring data is another good point.   Wherever required,visual representations come for you to understand.  Otherwise, they comfortably explains the concepts textually.  Agile people should be patience on this.</p>

<p>&#8220;Chapter 3Classification : Spam filtering&#8221; make your journey at the highest speed, with lot of interesting turns.  After two chapters with academical effect, this chapter make you feel like reading fictions. They starts with an example of how can you predict a person is man or woman based on the weight and height.  They called this mechanism as &#8220;separating hyperplane&#8221; and also explained a way of taking decision called &#8220;kernel trick&#8221;.</p>

<div>
  <div>
    &#8220;Chapter 4 Ranking: Priority Inbox&#8221; is another chart buster which provides you some good knowledge on &#8220;sorting with unknown ordering&#8221;.  GMail&#8217;s priority inbox and Amazon&#8217;s book recommendation are few examples.
  </div>
  
  <div>
  </div>
  
  <div>
    &#8220;Chapter 5 Regression: Predicting Page Views&#8221; thoroughly explained the regression concepts and linear regression.  He frightened us with an example of smoking habits and their longevity. <img src="http://udooz.net/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />
  </div>
</div>




<div>
</div>




<div>
  The remaining chapters gives you the same good experience on concepts like Regularization, Optimization.  Chapter 8 takes you another level and teaches you unsupervised learning.
</div>




<div>
</div>


<h2>Conclusion</h2>

<div>
  When you have enough time on the week-end and want to learn truly some interesting and futuristic concepts in computing.  Do read this book followed by working out the examples.  If you are serious developers and coding is your passion, then this book will take you to some level up and incite your innovative ideas for your products.  For academic people, this should be one of the paper in your course.  A very good book from O&#8217;Reilly  by actual field experienced authors.  You can buy this book at <a href="http://shop.oreilly.com/product/0636920018483.do" target="_blank">http://shop.oreilly.com/product/0636920018483.do</a> or <a href="http://www.amazon.com/Machine-Learning-Hackers-Drew-Conway/dp/1449303714" target="_blank">http://www.amazon.com/Machine-Learning-Hackers-Drew-Conway/dp/1449303714</a>.
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Storage Services Asynchronously in Java]]></title>
    <link href="http://udooz.github.io//blog/2012/04/azure-storage-services-asynchronously-in-java/"/>
    <updated>2012-04-20T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2012/04/azure-storage-services-asynchronously-in-java</id>
    <content type="html"><![CDATA[<p>When performing I/O bound operation, the program should use asynchronous approach.  This is particularly important when you access the Azure storage services.  As of now, Azure managed libraries for .NET and Java do not support asynchronous APIs.  Instead, by using underlying run time&#8217;s asynchronous programming approaches along with Azure storage services REST API makes you do I/O bound operations on Azure storage services.</p>

<p>In this post, I explain how to access Azure blob storage services asynchronously in Java.  I have used following libraries:</p>

<ul>
<li>org.apache.commons.codec-1.6.jar (for base64 string encoding)</li>
<li>async-http-client-1.7.3.jar (Ning&#8217;s Async Http Client library &#8211; <a href="https://github.com/sonatype/async-http-client" target="_blank"><a href="https://github.com/sonatype/async-http-client">https://github.com/sonatype/async-http-client</a></a>)</li>
<li>log4j-1.2.16.jar and slf4j-*-1.6.4.jar (Logging)</li>
</ul>


<h2>AzureStorage Class</h2>

<p>The class &#8220;AzureStorage&#8221; contains the implementation to create HTTP request object for accessing the Azure RESTful resources.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AzureStorage</span><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// fields</span>
</span><span class='line'><span class="n">String</span> <span class="n">storageMedium</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span> <span class="n">accountName</span><span class="o">;</span>
</span><span class='line'><span class="kt">byte</span><span class="o">[]</span> <span class="n">secretKey</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span> <span class="n">host</span><span class="o">;</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">regex</span><span class="o">.</span><span class="na">Pattern</span> <span class="n">urlAbsolutePathPattern</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//ctor</span>
</span><span class='line'><span class="n">AzureStorage</span><span class="o">(</span><span class="n">String</span> <span class="n">accountName</span><span class="o">,</span> <span class="n">String</span> <span class="n">storageMedium</span><span class="o">,</span> <span class="n">String</span> <span class="n">base64SecretKey</span><span class="o">)</span>
</span><span class='line'><span class="c1">// public method</span>
</span><span class='line'><span class="n">Request</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">resourcePath</span><span class="o">)</span>
</span><span class='line'><span class="c1">// utility method</span>
</span><span class='line'><span class="n">String</span> <span class="nf">createAuthorizationHeader</span><span class="o">(</span><span class="n">Request</span> <span class="n">request</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The constructor requires storage account name, storage medium (this is neither Java nor Azure terminology, just identify whether you want to access blob, table or queue) and the primary shared key of the account.  In this post, I just provide simple get() method for GET related Azure storage APIs.  The input to the method is the resource path.  Most the REST API requires authorization which in-turn sign the particular request by shared key.   createAuthorizationHeader() method does this job.</p>

<h2>The Ctor</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">AzureStorage</span><span class="o">(</span><span class="n">String</span> <span class="n">accountName</span><span class="o">,</span> <span class="n">String</span> <span class="n">storageMedium</span><span class="o">,</span> <span class="n">String</span> <span class="n">base64SecretKey</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="k">this</span><span class="o">.</span><span class="na">accountName</span> <span class="o">=</span> <span class="n">accountName</span><span class="o">;</span>
</span><span class='line'><span class="k">this</span><span class="o">.</span><span class="na">storageMedium</span> <span class="o">=</span> <span class="n">storageMedium</span><span class="o">;</span>
</span><span class='line'><span class="k">this</span><span class="o">.</span><span class="na">host</span> <span class="o">=</span> <span class="s">&quot;core.windows.net&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">secretKey</span> <span class="o">=</span> <span class="n">Base64</span><span class="o">.</span><span class="na">decodeBase64</span><span class="o">(</span><span class="n">base64SecretKey</span><span class="o">);</span>
</span><span class='line'><span class="n">urlAbsolutePathPattern</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">&quot;http(?:s?)://[-a-z0-9.]+/([-a-z0-9]*)/\\?.*&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The host field contains the part of base Azure storage URL.  The primary shared key for the account has been converted to base 64 decoded byte array.  Since, there is no AbsolutePath facility from an URL in Java world, I have used regular expression here.  For example, the absolute path of the URL &#8220;<a href="https://myaccount.blob.core.windows.net/acontainer/?restype=container&amp;comp=list&amp;#8221;">https://myaccount.blob.core.windows.net/acontainer/?restype=container&amp;comp=list&amp;#8221;</a> is &#8220;acontainer&#8221;.</p>

<h2>The get() method</h2>

<p>A HTTP request should be made to access a Azure storage with following details:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET https://myaccount.blob.core.windows.net/acontainer?restype=container&comp=acl&timeout=90 HTTP/1.1
</span><span class='line'>x-ms-version: 2009-09-19
</span><span class='line'>x-ms-date: Fri, 20 Apr 2012 11:12:05 GMT
</span><span class='line'>Authorization: SharedKey myaccount:9S/gs8jkAQKAN1Gp/y82B8jHR2r7HShZSiPdl2JSWQw=</span></code></pre></td></tr></table></div></figure>


<p>The above request specifies the URL for the resource, the REST API version, the request time stamp, authorization header.  The get() method here frames these request headers.  To want to know the complete details of request and response of Azure REST API, visit <a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd179355.aspx" target="_blank"><a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd179355.aspx">http://msdn.microsoft.com/en-us/library/windowsazure/dd179355.aspx</a></a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Request</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">resourcePath</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">String</span> <span class="n">RFC1123_PATTERN</span> <span class="o">=</span> <span class="s">&quot;EEE, dd MMM yyyy HH:mm:ss z&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">DateFormat</span> <span class="n">rfc1123Format</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleDateFormat</span><span class="o">(</span><span class="n">RFC1123_PATTERN</span><span class="o">);</span>
</span><span class='line'><span class="n">rfc1123Format</span><span class="o">.</span><span class="na">setTimeZone</span><span class="o">(</span><span class="n">TimeZone</span><span class="o">.</span><span class="na">getTimeZone</span><span class="o">(</span><span class="s">&quot;GMT&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// remaining code</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The rfc1123Format is used to send request time stamp in RFC 1123 format as shown in the HTTP request.  The below code snippet creates the com.ning.http.client.Request object.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;https://&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">accountName</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span> <span class="o">+</span>
</span><span class='line'><span class="k">this</span><span class="o">.</span><span class="na">storageMedium</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span> <span class="o">+</span><span class="err"> </span> <span class="k">this</span><span class="o">.</span><span class="na">host</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">resourcePath</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">RequestBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RequestBuilder</span><span class="o">(</span><span class="s">&quot;GET&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Request</span> <span class="n">request</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'><span class="o">.</span><span class="na">addHeader</span><span class="o">(</span><span class="s">&quot;content-type&quot;</span><span class="o">,</span> <span class="s">&quot;text/plain&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">.</span><span class="na">addHeader</span><span class="o">(</span><span class="s">&quot;content-length&quot;</span><span class="o">,</span> <span class="s">&quot;0&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">.</span><span class="na">addHeader</span><span class="o">(</span><span class="n">HeaderDate</span><span class="o">,</span> <span class="n">rfc1123Format</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">()))</span>
</span><span class='line'><span class="o">.</span><span class="na">addHeader</span><span class="o">(</span><span class="n">HeaderPrefixMS</span> <span class="o">+</span> <span class="s">&quot;version&quot;</span><span class="o">,</span> <span class="s">&quot;2009-09-19&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>The below code creates signed Authorization header.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">authHeader</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="n">authHeader</span> <span class="o">=</span> <span class="n">createAuthorizationHeader</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidKeyException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'><span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">UnsupportedEncodingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'><span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchAlgorithmException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'><span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="na">getHeaders</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Authorization&quot;</span><span class="o">,</span> <span class="s">&quot;SharedKey &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">accountName</span>
</span><span class='line'><span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">authHeader</span><span class="o">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">request</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This part in-turn calls method createAuthorizationHeader().</p>

<h2>The createAuthorizationHeader() method</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">createAuthorizationHeader</span><span class="o">(</span><span class="n">Request</span> <span class="n">request</span><span class="o">)</span>
</span><span class='line'><span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span><span class="o">,</span>
</span><span class='line'><span class="n">NoSuchAlgorithmException</span><span class="o">,</span> <span class="n">InvalidKeyException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="n">FluentCaseInsensitiveStringsMap</span> <span class="n">headers</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeaders</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">StringBuffer</span> <span class="n">stringToSign</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
</span><span class='line'><span class="n">stringToSign</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">stringToSign</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;\n\n0\n\n&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">stringToSign</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">headers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;content-type&quot;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">stringToSign</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;\n\n\n\n\n\n&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// remaining code part</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The authorization header should be like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Authorization="[SharedKey|SharedKeyLite] &lt;AccountName>:&lt;Signature>"</span></code></pre></td></tr></table></div></figure>


<p>The createAuthorizationHeader() method mainly creates the &#8220;<Signature>&#8221; string. The &#8220;Signature&#8221; is a HMAC-SHA256 based computed hash of the following content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET\n /*HTTP Verb*/
</span><span class='line'>\n    /*Content-Encoding*/
</span><span class='line'>\n    /*Content-Language*/
</span><span class='line'>\n    /*Content-Length*/
</span><span class='line'>\n    /*Content-MD5*/
</span><span class='line'>\n    /*Content-Type*/
</span><span class='line'>\n    /*Date*/
</span><span class='line'>\n    /*If-Modified-Since */
</span><span class='line'>\n    /*If-Match*/
</span><span class='line'>\n    /*If-None-Match*/
</span><span class='line'>\n    /*If-Unmodified-Since*/
</span><span class='line'>\n    /*Range*/
</span><span class='line'>x-ms-date:Sun, 11 Oct 2009 21:49:13 GMT\nx-ms-version:2009-09-19\n    /*CanonicalizedHeaders*/
</span><span class='line'>/myaccount/myaccount/acontainer\ncomp:metadata\nrestype:container\ntimeout:20    /*CanonicalizedResource*/</span></code></pre></td></tr></table></div></figure>


<p>For more details about this, visit: <a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd179428.aspx" target="_blank"><a href="http://msdn.microsoft.com/en-us/library/windowsazure/dd179428.aspx">http://msdn.microsoft.com/en-us/library/windowsazure/dd179428.aspx</a></a><br/>
The above Java code adds the string starting from GET to Range. For this demonstration, I skipped most of the headers with newline and added only content-length and content-type headers. The below code constructs the CanonicalizedHeaders.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span> <span class="n">httpStorageHeaderNameArray</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">headers</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="n">HeaderPrefixMS</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'><span class="n">httpStorageHeaderNameArray</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">httpStorageHeaderNameArray</span><span class="o">);</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">httpStorageHeaderNameArray</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">stringToSign</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">key</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">headers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The below code constructs the CanonicalizedResource.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">regex</span><span class="o">.</span><span class="na">Matcher</span> <span class="n">matcher</span> <span class="o">=</span> <span class="n">urlAbsolutePathPattern</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getUrl</span><span class="o">());</span>
</span><span class='line'><span class="n">String</span> <span class="n">absolutePath</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">matcher</span><span class="o">.</span><span class="na">find</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'><span class="n">absolutePath</span> <span class="o">=</span> <span class="n">matcher</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span><span class="k">else</span> <span class="o">{</span>
</span><span class='line'><span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;resourcePath&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">stringToSign</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">accountName</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">absolutePath</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">absolutePath</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">stringToSign</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">stringToSign</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span> <span class="n">paramsArray</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">request</span><span class="o">.</span><span class="na">getQueryParams</span><span class="o">().</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'><span class="n">paramsArray</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">paramsArray</span><span class="o">);</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">paramsArray</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">stringToSign</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">key</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getQueryParams</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, the whole string should be signed with by the shared key.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">byte</span><span class="o">[]</span> <span class="n">dataToMac</span> <span class="o">=</span> <span class="n">stringToSign</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">stringToSign</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span><span class="mi">1</span><span class="o">).</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">SecretKeySpec</span> <span class="n">signingKey</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SecretKeySpec</span><span class="o">(</span><span class="n">secretKey</span><span class="o">,</span> <span class="s">&quot;HmacSHA256&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Mac</span> <span class="n">hmacSha256</span> <span class="o">=</span> <span class="n">Mac</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;HmacSHA256&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">hmacSha256</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">signingKey</span><span class="o">);</span>
</span><span class='line'><span class="kt">byte</span><span class="o">[]</span> <span class="n">rawMac</span> <span class="o">=</span> <span class="n">hmacSha256</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">dataToMac</span><span class="o">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">Base64</span><span class="o">.</span><span class="na">encodeBase64String</span><span class="o">(</span><span class="n">rawMac</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Calling Side</h2>

<p>At the calling end, when you invoke the get() method, it returns the com.ning.http.client.Request instance.  You can make request asynchronously using Ning&#8217;s async library as shown below</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">AzureStorage</span> <span class="n">blobStorage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AzureStorage</span><span class="o">(</span><span class="s">&quot;account-name&quot;</span><span class="o">,</span> <span class="s">&quot;blob|table|queue&quot;</span><span class="o">,</span> <span class="s">&quot;sharedkey&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Request</span> <span class="n">request</span> <span class="o">=</span> <span class="n">blobStorage</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;ablobcontainer/?restype=container&amp;comp=list&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">AsyncHttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AsyncHttpClient</span><span class="o">();</span>
</span><span class='line'><span class="n">ListenableFuture</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">executeRequest</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="k">new</span> <span class="n">AsyncHandler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Response</span><span class="o">.</span><span class="na">ResponseBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Response</span><span class="o">.</span><span class="na">ResponseBuilder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">STATE</span> <span class="nf">onBodyPartReceived</span><span class="o">(</span><span class="kd">final</span> <span class="n">HttpResponseBodyPart</span> <span class="n">content</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">builder</span><span class="o">.</span><span class="na">accumulate</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">STATE</span><span class="o">.</span><span class="na">CONTINUE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">STATE</span> <span class="nf">onStatusReceived</span><span class="o">(</span><span class="kd">final</span> <span class="n">HttpResponseStatus</span> <span class="n">status</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">builder</span><span class="o">.</span><span class="na">accumulate</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">STATE</span><span class="o">.</span><span class="na">CONTINUE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">STATE</span> <span class="nf">onHeadersReceived</span><span class="o">(</span><span class="kd">final</span> <span class="n">HttpResponseHeaders</span> <span class="n">headers</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">builder</span><span class="o">.</span><span class="na">accumulate</span><span class="o">(</span><span class="n">headers</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">STATE</span><span class="o">.</span><span class="na">CONTINUE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Response</span> <span class="nf">onCompleted</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onThrowable</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">arg0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Visit <a href="http://sonatype.github.com/async-http-client/request.html" target="_blank"><a href="http://sonatype.github.com/async-http-client/request.html">http://sonatype.github.com/async-http-client/request.html</a></a> for more details about the above code. After that, you can do other computations. When you reach the place where you want the response for the asynchronous request, you can do the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// till here, there are other interesting computation done</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span><span class="o">(!</span> <span class="n">response</span><span class="o">.</span><span class="na">isDone</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">isCancelled</span><span class="o">())</span> <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Response</span> <span class="n">actualResponse</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">actualResponse</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">actualResponse</span><span class="o">.</span><span class="na">getStatusCode</span><span class="o">());</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">actualResponse</span><span class="o">.</span><span class="na">getResponseBody</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &#8220;while&#8221; part just wait for the asynchronous operation to be completed. After that, it processes the com.ning.http.client.Response instance.</p>

<p>You can download the complete example from <a href="http://udooz.net/file-drive/doc_download/24-asyncazureaccessfromjava.html" target="_blank"><a href="http://udooz.net/file-drive/doc_download/24-asyncazureaccessfromjava.html">http://udooz.net/file-drive/doc_download/24-asyncazureaccessfromjava.html</a></a></p>

<p><a style="display: none;" href="http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=3057856" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer Review &#8211; Mobile Design Pattern Gallery, Theresa Neil, O&#8217;Reilly]]></title>
    <link href="http://udooz.github.io//blog/2012/04/review-mobile-design-pattern-gallery-theresa-neil-oreilly/"/>
    <updated>2012-04-10T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2012/04/review-mobile-design-pattern-gallery-theresa-neil-oreilly</id>
    <content type="html"><![CDATA[<p><a href="http://udooz.github.io//blog/images/2012/03/s.gif" rel="prettyPhoto[377]"><img class="alignnone size-full wp-image-378" title="book cover" src="http://udooz.github.io//blog/images/2012/03/s.gif" alt="" width="145" height="190" /></a></p>

<h2>Introduction</h2>

<p>After her notable &#8220;Designing  Web Interfaces&#8221;, <a href="http://www.theresaneil.com/about/" target="_blank">Theresa Neil</a> come up with the UI pattern gallery for Mobile applications.  In this book, she lists out excellent set of UI design patterns  under nine different categories like Navigation, Forms, Tables &amp; Lists, etc.</p>

<h2>In Detail</h2>

<p>This book has 10 chapters with one Appendix.  The first nine chapters presents you the industry standard UI patterns for Mobile applications.  She has referred excellent set iOS and Android applications UI for every patterns.  The final chapter explains you some anti-patterns.</p>

<p>The first chapter &#8220;Navigation&#8221; started with mind catchy thought about why we should to look into mobile applications reviews with rating 1 and 2 stars, instead of 4 and 5 stars.  From where, you can get the real pulse of the end-users.</p>

<div>
  <div>
    <div>
      Patterns and their variance are explained with as much real-world app examples with enough snaps.  A picture is 1000 word worth, when I saw why bottom &#8211; tab navigation is more user flexibility which is the standard in iOS apps.
    </div>
    
    <div>
    </div>
    
    <div>
      She has given nice hint like ask password when accessing sensitive data and she insists &#8220;don&#8217;t innovate sign-in&#8221;.  Also, got to know some nice tips like
    </div>
    
    <div>
      <ul>
        <li>
          for mobile, &#8220;confirmation email field&#8221; is not required
        </li>
        <li>
          avoid horizontal label
        </li>
        <li>
          Avoid overwhelming the user with options
        </li>
      </ul>
    </div>
    
    <div>
      <div>
        During the journey, she has given some excellent ideas like &#8220;Make It Direct&#8221; and interesting philosophies like  &#8220;Buttons are secondary tools to work on primary objects&#8221;. <img src="http://udooz.net/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />
      </div>
    </div>
    
    <div>
    </div>
    
    <div>
      The only thing disappointed me is not covering Windows 8 Tiles UI metaphor.
    </div>
  </div>
  
  <div>
    Though this is a gallery book, it would be nice to have a brief about these.
  </div>
</div>




<div>
</div>


<h2>Conclusion</h2>

<div>
  <div>
    A must-have a book for mobile application UI designers.  Theresa grasps the ocean of UI metaphore in this single book.  To keep the objective of the book title, you can see well-sort of mobile applications UI from iOS and Androids.  Well attempt.  This book is not just a catalog.  Along with real-world example, it provides you when to use, how to improve the UX some situation in short and sweet way.
  </div>
</div>




<div>
</div>




<div>
  Worth buy.
</div>




<div>
  Visit: <a href="http://shop.oreilly.com/product/0636920022367.do" target="_blank">http://shop.oreilly.com/product/0636920022367.do</a>
</div>


<p><a style="display: none;" href="http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=3057856" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Synchronous, Async and Parallel Programming Performance in Windows Azure]]></title>
    <link href="http://udooz.github.io//blog/2012/04/synchronous-async-and-parallel-programming-performance-in-azure/"/>
    <updated>2012-04-06T00:00:00+05:30</updated>
    <id>http://udooz.github.io//blog/2012/04/synchronous-async-and-parallel-programming-performance-in-azure</id>
    <content type="html"><![CDATA[<p>This post discusses the performance benefits of effectively using .NET TPL  when doing I/O bound operations.</p>

<h2>Intent</h2>

<p>When there is a need for non-synchronous programming pattern (asynchronous and/or parallel) in Azure applications, the pattern of choice must be based on the target VM size we have chosen for that app and the type of operation particular part does.</p>

<h2>Detail</h2>

<p>.NET provides TPL (Task Parallel Library) to write non-synchronous programming much easier way. The asynchronous API enables to perform I/O bound and compute-bound asynchronous operations which lets the main thread to do the remaining operations without waiting for the asynchronous operations to complete. Refer <a href="http://snip.udooz.net/Hbmib2" target="_blank"><a href="http://snip.udooz.net/Hbmib2">http://snip.udooz.net/Hbmib2</a></a> for details. The parallel API enables to effectively utilizes the multicore processors on your machine to perform data intensive or task intensive operations. Refer <a href="http://snip.udooz.net/HTLrVv" target="_blank"><a href="http://snip.udooz.net/HTLrVv">http://snip.udooz.net/HTLrVv</a></a> for details.</p>

<p>When writing azure applications, we may need to interact with many external resources like blob, queues, tables, etc. So, it is very obvious to think asynchronous or parallel programming patterns when the amount of I/O operations are higher. In these cases, we should be more cautious on selecting asynchronous and parallel. The extra-small instance provides shared CPU power, the small instance provides single core and medium or above provide multicore. Hence, asynchronous pattern would be the better option for extra-small and small instances. For problem those are highly parallel in nature, then the application should be placed on Medium or above instance with parallel pattern.</p>

<p>To confirm the above statement, I did a small proof of concept which has high I/O operation. The program interacts with Azure blob to get large number of blobs to get data to solve a problem. I&#8217;ve taken a small amount of Enron Email dataset from <a href="http://www.cs.cmu.edu/~enron/" target="_blank"><a href="http://www.cs.cmu.edu/~enron/">http://www.cs.cmu.edu/~enron/</a></a> which contains email messages for various Enron users on their respective Inbox folder as shown in figure 1 and figure 2.</p>

<p><a href="http://udooz.github.io//blog/images/2012/04/async_figure_1.png" rel="prettyPhoto[381]"><img class="alignnone size-full wp-image-382" style="border-image: initial; border-width: 1px; border-color: black; border-style: solid;" title="async_figure_1" src="http://udooz.github.io//blog/images/2012/04/async_figure_1.png" alt="" width="202" height="183" /></a></p>

<p><a href="http://udooz.github.io//blog/images/2012/04/async_figure_2.png" rel="prettyPhoto[381]"><img class="alignnone size-full wp-image-383" style="border-image: initial; border-width: 1px; border-color: black; border-style: solid;" title="async_figure_2" src="http://udooz.github.io//blog/images/2012/04/async_figure_2.png" alt="" width="320" height="193" /></a></p>

<p>The above figure shows the “inbox” for the user “benson-r”. Every users have approximately more than 200 email messages. A message contains the following content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>>Message-ID: &lt;21651803.1075842014433.JavaMail.evans@thyme>
</span><span class='line'>Date: Tue, 5 Feb 2002 11:06:50 -0800 (PST)
</span><span class='line'>From: robert.stalford@enron.com
</span><span class='line'>To: jay.webb@enron.com
</span><span class='line'>Subject: online power option change request
</span><span class='line'>Cc: andy.zipper@enron.com
</span><span class='line'>Mime-Version: 1.0
</span><span class='line'>Content-Type: text/plain; charset=us-ascii
</span><span class='line'>Content-Transfer-Encoding: 7bit
</span><span class='line'>======= OTHER HEADERS=======
</span><span class='line'>Jay,
</span><span class='line'>It was ..... ====== remaining message body ======</span></code></pre></td></tr></table></div></figure>


<p>The program going to solve how many times particular user written email to this user. The email messages are resided in a blob container with appropriate blob directory. Hence, the pseudo code is some thing like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">for</span> <span class="n">every</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">get</span> <span class="n">the</span> <span class="n">blob</span> <span class="n">sub</span><span class="p">-</span><span class="n">directory</span> <span class="k">for</span> <span class="n">the</span> <span class="n">user</span> <span class="k">from</span> <span class="n">the</span> <span class="n">blob</span> <span class="n">container</span>
</span><span class='line'>  <span class="n">create</span> <span class="k">new</span> <span class="n">dictionary</span> <span class="c1">// key - sender email ID, value - count</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">every</span> <span class="n">blob</span> <span class="k">in</span> <span class="n">the</span> <span class="n">sub</span><span class="p">-</span><span class="n">directory</span>
</span><span class='line'>      <span class="k">get</span> <span class="n">blob</span> <span class="n">content</span>
</span><span class='line'>      <span class="n">parse</span> <span class="n">the</span> <span class="err">“</span><span class="n">From</span><span class="err">”</span> <span class="k">value</span> <span class="k">from</span> <span class="n">the</span> <span class="n">message</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">the</span> <span class="err">“</span><span class="n">From</span><span class="err">”</span> <span class="k">value</span> <span class="n">already</span> <span class="n">exists</span> <span class="n">on</span> <span class="n">dictionary</span>
</span><span class='line'>          <span class="n">increment</span> <span class="n">the</span> <span class="k">value</span> <span class="n">by</span> <span class="m">1</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="k">add</span> <span class="n">From</span> <span class="n">field</span> <span class="k">value</span> <span class="k">as</span> <span class="n">key</span> <span class="n">and</span> <span class="k">value</span> <span class="k">as</span> <span class="m">1</span> <span class="k">into</span> <span class="n">the</span> <span class="n">dictionary</span>
</span><span class='line'>  <span class="n">write</span> <span class="n">the</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>I apply “sync, async and parallel” along with normal Task.StartNew and Task.StartNew + ContinueWith programming patterns on &#8220;fetching and parsing email messages&#8221; logic (more chatty I/O).</p>

<h2>The Code</h2>

<p>The normal procedural flow is shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// rootContainer is CloudBlobDirectory represents &quot;maildir&quot; container</span>
</span><span class='line'><span class="kt">var</span> <span class="n">mailerInbox</span> <span class="p">=</span> <span class="n">rootContainer</span><span class="p">.</span><span class="n">GetSubdirectory</span><span class="p">(</span><span class="n">mailerFolder</span> <span class="p">+</span> <span class="s">&quot;/inbox&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">blob</span> <span class="k">in</span> <span class="n">mailerInbox</span><span class="p">.</span><span class="n">ListBlobs</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="c1">//don&#39;t see the subfolders if any</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">blob</span> <span class="k">is</span> <span class="n">CloudBlobDirectory</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">email</span> <span class="p">=</span> <span class="n">mailerInbox</span><span class="p">.</span><span class="n">GetBlobReference</span><span class="p">(</span><span class="n">blob</span><span class="p">.</span><span class="n">Uri</span><span class="p">.</span><span class="n">ToString</span><span class="p">()).</span><span class="n">DownloadText</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">//parsing From field</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">match</span> <span class="p">=</span> <span class="n">Regex</span><span class="p">.</span><span class="n">Match</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="s">@&quot;From\W*(\w[-.\w]*@[-a-z0-9]+(\.[-a-z0-9]+)*)&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">1</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'> <span class="c1">//estimate is a Dictionary contains From email id and the count</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">estimate</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</span><span class='line'> <span class="n">estimate</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="p">=</span> <span class="n">estimate</span><span class="p">[</span><span class="n">key</span><span class="p">]++;</span>
</span><span class='line'> <span class="k">else</span>
</span><span class='line'> <span class="n">estimate</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">var</span> <span class="n">sb</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">kv</span> <span class="k">in</span> <span class="n">estimate</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="n">sb</span><span class="p">.</span><span class="n">AppendFormat</span><span class="p">(</span><span class="s">&quot;{0}: {1}\n&quot;</span><span class="p">,</span> <span class="n">kv</span><span class="p">.</span><span class="n">Key</span><span class="p">,</span> <span class="n">kv</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//writing the result to a blob</span>
</span><span class='line'><span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">mailerInbox</span><span class="p">.</span><span class="n">GetBlobReference</span><span class="p">(</span><span class="s">&quot;result_normal_&quot;</span> <span class="p">+</span> <span class="n">attempt</span><span class="p">);</span>
</span><span class='line'><span class="n">result</span><span class="p">.</span><span class="n">UploadText</span><span class="p">(</span><span class="n">sb</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>The parallel version is shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">mailerInbox</span> <span class="p">=</span> <span class="n">rootContainer</span><span class="p">.</span><span class="n">GetSubdirectory</span><span class="p">(</span><span class="n">mailerFolder</span> <span class="p">+</span> <span class="s">&quot;/inbox&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Parallel</span><span class="p">.</span><span class="n">ForEach</span><span class="p">(</span><span class="n">mailerInbox</span><span class="p">.</span><span class="n">ListBlobs</span><span class="p">(),</span> <span class="n">blob</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(!(</span><span class="n">blob</span> <span class="k">is</span> <span class="n">CloudBlobDirectory</span><span class="p">))</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">email</span> <span class="p">=</span> <span class="n">mailerInbox</span><span class="p">.</span><span class="n">GetBlobReference</span><span class="p">(</span><span class="n">blob</span><span class="p">.</span><span class="n">Uri</span><span class="p">.</span><span class="n">ToString</span><span class="p">()).</span><span class="n">DownloadText</span><span class="p">();</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">match</span> <span class="p">=</span> <span class="n">Regex</span><span class="p">.</span><span class="n">Match</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="s">@&quot;From\W*(\w[-.\w]*@[-a-z0-9]+(\.[-a-z0-9]+)*)&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">1</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// used ConcurrentDictionary</span>
</span><span class='line'> <span class="n">cestimate</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">v</span><span class="p">++);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//the result writing part is here, similar to normal version</span>
</span></code></pre></td></tr></table></div></figure>


<p>The asynchronous version is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">mailerInbox</span> <span class="p">=</span> <span class="n">rootContainer</span><span class="p">.</span><span class="n">GetSubdirectory</span><span class="p">(</span><span class="n">mailerFolder</span> <span class="p">+</span> <span class="s">&quot;/inbox&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">tasks</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Queue</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">blob</span> <span class="k">in</span> <span class="n">mailerInbox</span><span class="p">.</span><span class="n">ListBlobs</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">blob</span> <span class="k">is</span> <span class="n">CloudBlobDirectory</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// blobStorage is a wrapper for Azure Blob storage REST API</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">webRequest</span> <span class="p">=</span> <span class="n">blobStorage</span><span class="p">.</span><span class="n">GetWebRequest</span><span class="p">(</span><span class="n">blob</span><span class="p">.</span><span class="n">Uri</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">tasks</span><span class="p">.</span><span class="n">Enqueue</span><span class="p">(</span><span class="n">Task</span><span class="p">.</span><span class="n">Factory</span><span class="p">.</span><span class="n">FromAsync</span><span class="p">(</span><span class="n">webRequest</span><span class="p">.</span><span class="n">BeginGetResponse</span><span class="p">,</span>
</span><span class='line'> <span class="n">webRequest</span><span class="p">.</span><span class="n">EndGetResponse</span><span class="p">,</span> <span class="n">TaskCreationOptions</span><span class="p">.</span><span class="n">None</span><span class="p">)</span>
</span><span class='line'> <span class="p">.</span><span class="n">ContinueWith</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="n">t</span><span class="p">.</span><span class="n">Result</span><span class="p">;</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamReader</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">GetResponseStream</span><span class="p">());</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">emailMsg</span> <span class="p">=</span> <span class="n">stream</span><span class="p">.</span><span class="n">ReadToEnd</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">stream</span><span class="p">.</span><span class="n">Close</span><span class="p">();</span>
</span><span class='line'> <span class="n">response</span><span class="p">.</span><span class="n">Close</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">match</span> <span class="p">=</span> <span class="n">regex</span><span class="p">.</span><span class="n">Match</span><span class="p">(</span><span class="n">emailMsg</span><span class="p">);</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">1</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'> <span class="n">cestimate</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">v</span><span class="p">++);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="p">}));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Task</span><span class="p">.</span><span class="n">WaitAll</span><span class="p">(</span><span class="n">tasks</span><span class="p">.</span><span class="n">ToArray</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>The major difference in the &#8220;fetching and parsing&#8221; part is, instead of managed API, I have used REST API with a wrapper so that I can access the Blob asynchronously. In addition the above, I have used normal TPL tasks in two different way.  In the first way, I just processed &#8220;fetching and parsing&#8221; stuff as shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">blob</span> <span class="k">in</span> <span class="n">mailerInbox</span><span class="p">.</span><span class="n">ListBlobs</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">blob</span> <span class="k">is</span> <span class="n">CloudBlobDirectory</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'> <span class="kt">string</span> <span class="n">blobUri</span> <span class="p">=</span> <span class="n">blob</span><span class="p">.</span><span class="n">Uri</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
</span><span class='line'> <span class="n">tasks</span><span class="p">.</span><span class="n">Enqueue</span><span class="p">(</span><span class="n">Task</span><span class="p">.</span><span class="n">Factory</span><span class="p">.</span><span class="n">StartNew</span><span class="p">(()</span> <span class="p">=&gt;</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">email</span> <span class="p">=</span> <span class="n">mailerInbox</span><span class="p">.</span><span class="n">GetBlobReference</span><span class="p">(</span><span class="n">blobUri</span><span class="p">).</span><span class="n">DownloadText</span><span class="p">();</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">match</span> <span class="p">=</span> <span class="n">Regex</span><span class="p">.</span><span class="n">Match</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="s">@&quot;From\W*(\w[-.\w]*@[-a-z0-9]+(\.[-a-z0-9]+)*)&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">1</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'> <span class="n">cestimate</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">v</span><span class="p">++);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="p">}));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Task</span><span class="p">.</span><span class="n">WaitAll</span><span class="p">(</span><span class="n">tasks</span><span class="p">.</span><span class="n">ToArray</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another one way, I have used ContinueWith option with the Task as shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">blob</span> <span class="k">in</span> <span class="n">mailerInbox</span><span class="p">.</span><span class="n">ListBlobs</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">blob</span> <span class="k">is</span> <span class="n">CloudBlobDirectory</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'> <span class="kt">string</span> <span class="n">blobUri</span> <span class="p">=</span> <span class="n">blob</span><span class="p">.</span><span class="n">Uri</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
</span><span class='line'> <span class="n">tasks</span><span class="p">.</span><span class="n">Enqueue</span><span class="p">(</span><span class="n">Task</span><span class="p">.</span><span class="n">Factory</span><span class="p">.</span><span class="n">StartNew</span><span class="p">(()</span> <span class="p">=&gt;</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'> <span class="k">return</span> <span class="n">mailerInbox</span><span class="p">.</span><span class="n">GetBlobReference</span><span class="p">(</span><span class="n">blobUri</span><span class="p">).</span><span class="n">DownloadText</span><span class="p">();</span>
</span><span class='line'> <span class="p">}).</span><span class="n">ContinueWith</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">match</span> <span class="p">=</span> <span class="n">regex</span><span class="p">.</span><span class="n">Match</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">Result</span><span class="p">);</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">1</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'> <span class="n">cestimate</span><span class="p">.</span><span class="n">AddOrUpdate</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">v</span><span class="p">++);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="p">},</span> <span class="n">TaskContinuationOptions</span><span class="p">.</span><span class="n">OnlyOnRanToCompletion</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Task</span><span class="p">.</span><span class="n">WaitAll</span><span class="p">(</span><span class="n">tasks</span><span class="p">.</span><span class="n">ToArray</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Results</h2>

<p>I&#8217;ve hosted the work role and storage account at &#8220;Southeast Asia&#8221;.  On every VM size, I&#8217;ve made 6 runs and removed the first time result.  I have given 12 concurrent connection in the ServicePointManager for all the testing.  I did not change this value in medium and large instances. All the results are in millisecond.</p>

<h3>Extra Small</h3>

<table width="461" border="0" cellspacing="0" cellpadding="0">
  <colgroup> <col span="4" width="64" /> <col width="66" /> <col width="139" /></colgroup> <tr>
    <td width="64" height="20">
    </td>
    
    <td width="64">
      Normal
    </td>
    
    <td width="64">
      Parallel
    </td>
    
    <td width="64">
      Async
    </td>
    
    <td width="66">
      Task
    </td>
    
    <td width="139">
      Task & ContinueWith
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 1
    </td>
    
    <td>
      4326
    </td>
    
    <td>
      1209
    </td>
    
    <td>
      1004
    </td>
    
    <td>
      1807
    </td>
    
    <td>
      1671
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 2
    </td>
    
    <td>
      4773
    </td>
    
    <td>
      1319
    </td>
    
    <td>
      972
    </td>
    
    <td>
      1399
    </td>
    
    <td>
      1887
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 3
    </td>
    
    <td>
      4189
    </td>
    
    <td>
      1027
    </td>
    
    <td>
      1050
    </td>
    
    <td>
      1590
    </td>
    
    <td>
      1322
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 4
    </td>
    
    <td>
      4769
    </td>
    
    <td>
      1299
    </td>
    
    <td>
      964
    </td>
    
    <td>
      1778
    </td>
    
    <td>
      1728
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 5
    </td>
    
    <td>
      4416
    </td>
    
    <td>
      1665
    </td>
    
    <td>
      952
    </td>
    
    <td>
      1313
    </td>
    
    <td>
      1150
    </td>
  </tr>
</table>


<p><a href="http://udooz.github.io//blog/images/2012/04/ExtraSmall.png" rel="prettyPhoto[381]"><img class="alignnone size-full wp-image-396" title="ExtraSmall" src="http://udooz.github.io//blog/images/2012/04/ExtraSmall.png" alt="" width="481" height="289" /></a></p>

<h3>Small</h3>

<table width="461" border="0" cellspacing="0" cellpadding="0">
  <colgroup> <col span="4" width="64" /> <col width="66" /> <col width="139" /></colgroup> <tr>
    <td width="64" height="20">
    </td>
    
    <td width="64">
      Normal
    </td>
    
    <td width="64">
      Parallel
    </td>
    
    <td width="64">
      Async
    </td>
    
    <td width="66">
      Task
    </td>
    
    <td width="139">
      Task & ContinueWith
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 1
    </td>
    
    <td>
      4044
    </td>
    
    <td>
      1319
    </td>
    
    <td>
      687
    </td>
    
    <td>
      2003
    </td>
    
    <td>
      2045
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 2
    </td>
    
    <td>
      4116
    </td>
    
    <td>
      1229
    </td>
    
    <td>
      972
    </td>
    
    <td>
      2070
    </td>
    
    <td>
      1854
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 3
    </td>
    
    <td>
      4060
    </td>
    
    <td>
      1468
    </td>
    
    <td>
      981
    </td>
    
    <td>
      1584
    </td>
    
    <td>
      1501
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 4
    </td>
    
    <td>
      4375
    </td>
    
    <td>
      1316
    </td>
    
    <td>
      909
    </td>
    
    <td>
      1208
    </td>
    
    <td>
      1924
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 5
    </td>
    
    <td>
      4167
    </td>
    
    <td>
      931
    </td>
    
    <td>
      797
    </td>
    
    <td>
      1272
    </td>
    
    <td>
      1109
    </td>
  </tr>
</table>


<p><a href="http://udooz.github.io//blog/images/2012/04/Small.png" rel="prettyPhoto[381]"><img class="alignnone size-full wp-image-399" title="Small" src="http://udooz.github.io//blog/images/2012/04/Small.png" alt="" width="481" height="289" /></a></p>

<h3>Medium</h3>

<table width="461" border="0" cellspacing="0" cellpadding="0">
  <colgroup> <col span="4" width="64" /> <col width="66" /> <col width="139" /></colgroup> <tr>
    <td width="64" height="20">
    </td>
    
    <td width="64">
      Normal
    </td>
    
    <td width="64">
      Parallel
    </td>
    
    <td width="64">
      Async
    </td>
    
    <td width="66">
      Task
    </td>
    
    <td width="139">
      Task & ContinueWith
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 1
    </td>
    
    <td>
      4086
    </td>
    
    <td>
      1839
    </td>
    
    <td>
      933
    </td>
    
    <td>
      1326
    </td>
    
    <td>
      1385
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 2
    </td>
    
    <td>
      4245
    </td>
    
    <td>
      1204
    </td>
    
    <td>
      751
    </td>
    
    <td>
      1069
    </td>
    
    <td>
      1064
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 3
    </td>
    
    <td>
      4193
    </td>
    
    <td>
      1449
    </td>
    
    <td>
      753
    </td>
    
    <td>
      1176
    </td>
    
    <td>
      1291
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 4
    </td>
    
    <td>
      4426
    </td>
    
    <td>
      1076
    </td>
    
    <td>
      619
    </td>
    
    <td>
      1300
    </td>
    
    <td>
      1395
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 5
    </td>
    
    <td>
      4145
    </td>
    
    <td>
      811
    </td>
    
    <td>
      674
    </td>
    
    <td>
      888
    </td>
    
    <td>
      951
    </td>
  </tr>
</table>


<p><a href="http://udooz.github.io//blog/images/2012/04/Medium.png" rel="prettyPhoto[381]"><img title="Medium" src="http://udooz.github.io//blog/images/2012/04/Medium.png" alt="" width="481" height="289" /></a></p>

<h3>Large</h3>

<table width="461" border="0" cellspacing="0" cellpadding="0">
  <colgroup> <col span="4" width="64" /> <col width="66" /> <col width="139" /></colgroup> <tr>
    <td width="64" height="20">
    </td>
    
    <td width="64">
      Normal
    </td>
    
    <td width="64">
      Parallel
    </td>
    
    <td width="64">
      Async
    </td>
    
    <td width="66">
      Task
    </td>
    
    <td width="139">
      Task & ContinueWith
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 1
    </td>
    
    <td>
      4124
    </td>
    
    <td>
      1269
    </td>
    
    <td>
      697
    </td>
    
    <td>
      1159
    </td>
    
    <td>
      1091
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 2
    </td>
    
    <td>
      4013
    </td>
    
    <td>
      945
    </td>
    
    <td>
      892
    </td>
    
    <td>
      1028
    </td>
    
    <td>
      1299
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 3
    </td>
    
    <td>
      4277
    </td>
    
    <td>
      977
    </td>
    
    <td>
      657
    </td>
    
    <td>
      1228
    </td>
    
    <td>
      1148
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 4
    </td>
    
    <td>
      4322
    </td>
    
    <td>
      1270
    </td>
    
    <td>
      840
    </td>
    
    <td>
      820
    </td>
    
    <td>
      1072
    </td>
  </tr>
  
  <tr>
    <td height="20">
      Run 5
    </td>
    
    <td>
      4141
    </td>
    
    <td>
      1154
    </td>
    
    <td>
      729
    </td>
    
    <td>
      1059
    </td>
    
    <td>
      1151
    </td>
  </tr>
</table>


<p><a href="http://udooz.github.io//blog/images/2012/04/Large.png" rel="prettyPhoto[381]"><img title="Large" src="http://udooz.github.io//blog/images/2012/04/Large.png" alt="" width="481" height="289" /></a></p>

<p>Surprisingly, irrespective of the VM size, when an operation is I/O bound, asynchronous pattern outshines all the other approaches followed by Parallel.</p>

<h2>Final Words</h2>

<p>Hence, the &#8220;asynchronous&#8221; approach won the I/O bound operation (shown as a diagram also here).</p>

<p><a href="http://udooz.github.io//blog/images/2012/04/score.png" rel="prettyPhoto[381]"><img class="alignnone size-full wp-image-417" title="score" src="http://udooz.github.io//blog/images/2012/04/score.png" alt="" width="358" height="151" /></a></p>

<p>&nbsp;</p>

<p>Let me come up with one more test which covers on which area Parallel approach will shine.  In addition to these, when you have lesser I/O and want smooth multithreading, Task and Task + ContinueWith may help you.</p>

<p>What do you think? Share your thoughts!</p>

<p><strong>I highly thank  <a href="https://twitter.com/#!/smarx" target="_blank">Steve Marx</a> and <a href="https://twitter.com/#!/NunoGodinho" target="_blank">Nuno</a>  for validating my approach and the results which are actually improved my overall testing strategy.</strong></p>

<p>The source code is available at <a href="http://udooz.net/file-drive/doc_download/23-mailanalyzerasyncpoc.html" target="_blank"><a href="http://udooz.net/file-drive/doc_download/23-mailanalyzerasyncpoc.html">http://udooz.net/file-drive/doc_download/23-mailanalyzerasyncpoc.html</a></a><a style="display: none;" href="http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=3057856" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
</feed>
